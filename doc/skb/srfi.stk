;;;;
;;;; srfi.stk   -- List of implemented SRFI in STklos
;;;;
;;;; Copyright Â© 2004-2020 Erick Gallesio - I3S-CNRS/ESSI <eg@essi.fr>
;;;;
;;;;
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;;;; USA.
;;;;
;;;;           Author: Erick Gallesio [eg@essi.fr]
;;;;    Creation date: 18-Aug-2004 12:43 (eg)
;;;; Last file update:  9-Oct-2020 18:51 (eg)
;;;;

(define srfi-address "http://srfi.schemers.org/srfi-~A/srfi-~A.html")

(define *srfis*
   '((0  . "Feature-based conditional expansion construct")
     (1  . "List Library")
     (2  . "AND-LET*: an AND with local bindings, a guarded LET* special form")
     (4  . "Homogeneous numeric vector datatypes")
     (5  . "A compatible let form with signatures and rest arguments")
     (6  . "Basic String Ports")
     (7  . "Feature-based program configuration language ")
     (8  . "Receive: Binding to multiple values")
     (9  . "Defining Record Types")
     (10 . "Sharp Comma External Form")
     (11 . "Syntax for receiving multiple values")
     (13 . "String Library")
     (14 . "Character-Set Library")
     (16 . "Syntax for procedures of variable arity")
     (17 . "Generalized set!")
     (18 . "Multithreading support")
     (22 . "Running Scheme Scripts on Unix")
     (23 . "Error reporting mechanism")
     (26 . "Notation for Specializing Parameters without Currying")
     (27 . "Source of random bits")
     (28 . "Basic Format Strings")
     (30 . "Nested Multi-line Comments")
     (31 . "A special form for recursive evaluation")
     (34 . "Exception Handling for Programs")
     (35 . "Conditions")
     (36 . "I/O Conditions")
     (37 . "args-fold: a program argument processor")
     (38 . "External representation of shared structures")
     (39 . "Parameters objects")
     (45 . "Primitives for Expressing Iterative Lazy Algorithms")
     (48 . "Intermediate Format Strings")
     (51 . "Handling rest list")
     (54 . "Formatting")
     (55 . "Require-extension")
     (59 . "Vicinity")
     (60 . "Integers as bits")
     (61 . "A more general COND clause")
     (62 . "S-expression comments")
     (64 . "A Scheme API for test suites")
     (66 . "Octet Vectors")
     (69 . "Basic Hash Tables")
     (70 . "Numbers")
     (74 . "Octet-Addressed Binary Blocks")
     (87 . "=> in case clauses")
     (88 . "Keyword Objects")
     (89 . "Optional Positional and Named Parameters")
     (96 . "SLIB Prerequisites ")
     (98 . "Interface to access environment variables")
     (100 . "define-lambda-object")
     (111 . "Boxes")
     (112 . "Environment Inquiry")
     (113 . "Sets and Bags")
     (117 . "Queues based on lists")
     (118 . "Simple adjustable-size strings ")
     (128 . "Comparators (reduced)")
     (129 . "Titlecase procedures")
     (135 . "Immutable Texts")
     (141 . "Integer Division")
     (145 . "Assumptions")
     (151 . "Bitwise Operations")
     (156 . "Syntactic combiners for binary predicates")
     (158 . "Generators and Accumulators")
     (161 . "Unifiable Boxes")
     (169 . "Underscores in numbers")
     (171 . "Transducers")
     (173 . "Hooks")
     (174 . "POSIX Timespecs")
     (175 . "ASCII character library")
     (176 . "Version flag")
     (180 . "JSON")
     (185 . "Linear adjustable-length strings")
     (189 . "Maybe and Either: optional container types")
     (190 . "Coroutines Generators")
     (193 . "Command line")
     (195 . "Multiple-value boxes")
     (196 . "Range Objects")
   ))

(define (srfi n)
  [,(bold (format "SRFI-~A" n)) (,(cdr (assoc n *srfis*)))])

(define (link-srfi n)
  (let* ((info (assoc n *srfis*))
         (txt  (if info (cdr info) (error "SRFI ~S not in database!!" n)))
         (url (format srfi-address n n)))
    [,(bold (ref :text (format "SRFI-~a" n) :url url))
     (,(emph txt))]))

(define (quick-link-srfi n)
  (let* ((info (assoc n *srfis*))
         (txt  (if info (cdr info) (error "SRFI ~S not in database!!" n)))
         (url (format srfi-address n n)))
    (ref :text (format "SRFI-~a" n) :url url)))

(define (title-srfi n)
  (let* ((info (assoc n *srfis*))
         (txt  (if info (cdr info) (error "SRFI ~S not in database!!" n)))
         (url (format srfi-address n n)))
    (format "SRFI-~A -- ~A" n txt)))

