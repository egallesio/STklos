;;;;
;;;; ffi.skb			-- FFI documentation
;;;;
;;;; Copyright © 2007 Erick Gallesio - I3S-CNRS/ESSI <eg@essi.fr>
;;;;
;;;;
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;;;; USA.
;;;;
;;;;           Author: Erick Gallesio [eg@essi.fr]
;;;;    Creation date: 22-Jun-2007 23:45 (eg)
;;;; Last file update: 25-Jun-2007 14:49 (eg)
;;;;

(chapter :title "Foreign Function Interface"

(p [The ,(stklos) Foreign Function Interface (FFI for short) has been
defined to allow an easy access to functions written in C without
needing to build C-wrappers and, consequently, without any need to
write C code.  Note that the FFI is very machine dependent and that it
works only on a limited set of architectures/systems ,(footnote [FFI
system should work on the following architectures/systems:
gcc_ppc_osx, gcc_sparc_unix, gcc_x64_unix, gcc_x86_unix.]). Moreover,
since FFI allows very low level access, it is easy to crash the
,(stklos) VM when using an external C function.])

   (p (bold [Note that the support for FFI is still minimal and that it will
evolve in future versions.]))

(p [The definition of an external function is done with the
,(emph "define-external") special form.  This form takes as arguments
a typed list of parameters and accepts several options to define the
name of the function in the C world, the library which defines this
function, ... The type of the function result and the type of its
arguments are defined in Figure ,(ref :figure "FFI types"). This table lists
the various keywords reserved for denoting types and their equivalence
between the C and the Scheme worlds.])

(figure :legend "FFI types"
   (center
    (table  :rules 'cols :frame 'border :width 90.
       (tr :bg "#eeeeee"
	   (th :align "left" "Name")
	   (th :align "left" "Corresponding C type")
	   (th :align "left" "Corresponding Scheme Type"))
       (tr (tdl (bold ":void")) (tdl "void") (tdl "none"))
       (tr (tdl (bold ":char")) (tdl "char") (tdl "Scheme character"))
       (tr (tdl (bold ":short")) (tdl "short") (tdl "Scheme integer"))
       (tr (tdl (bold ":ushort")) (tdl "unsigned short") (tdl "Scheme integer"))
       (tr (tdl (bold ":int")) (tdl "int") (tdl "Scheme integer"))
       (tr (tdl (bold ":uint")) (tdl "unsined int") (tdl "Scheme integer"))
       (tr (tdl (bold ":long")) (tdl "long int") (tdl "Scheme integer"))
       (tr (tdl (bold ":ulong")) (tdl "unsigned long int") (tdl "Scheme integer"))
;       (tr (tdl (bold ":lonlong")) (tdl "") (tdl ""))
;       (tr (tdl (bold ":ulonlong")) (tdl "") (tdl ""))
       (tr (tdl (bold ":float")) (tdl "float") (tdl "Scheme real number"))
       (tr (tdl (bold ":double")) (tdl "double") (tdl "Scheme real number"))
       (tr (tdl (bold ":boolean")) (tdl "int") (tdl "boolean"))
       (tr (tdl (bold ":pointer")) (tdl "void *") (tdl "Scheme pointer object or Scheme string"))
       (tr (tdl (bold ":string")) (tdl "char *") (tdl "Scheme string"))
;       (tr (tdl (bold ":int8")) (tdl "") (tdl ""))
;       (tr (tdl (bold ":int16")) (tdl "") (tdl ""))
;       (tr (tdl (bold ":int32")) (tdl "") (tdl ""))
;       (tr (tdl (bold ":int64")) (tdl "") (tdl ""))
       (tr (tdl (bold ":obj")) (tdl "void *") (tdl "Any Scheme object passed as is")))))

(p [Note that by using the ,(tt ":pointer") type, one gives up the safety of
the Scheme environment, and care must be taken so the program will not crash.])

(insertdoc 'define-external)

(p [Hereafter, there are some commented definitions of external functions:])

(fontified-code [
 (define-external isatty ((fd :int))
     :return-type :boolean)

  (define-external system ((cmd :string))
    :return-type :int)

  (define-external ttyname (:int)
    :return-type :string)
])

(p [All these functions are defined in the C standard library, hence it is not
necessary to specify the ,(tt ":library-name") option.])

(itemize
   (item [,(emph "istty") is declared here as a function which takes an
integer and returns a boolean (in fact, the value returned by the
C function ,(emph "isatty") is an ,(emph "int"), but we ask here to the FFI
system to translate this result as a boolean value in the Scheme
world).])

   (item [,(emph "system") is a function which takes a string as parameter
and returns an ,(emph "int").])

   (item [,(emph "ttyname") is a function whih takes an int and returns a string.
Note that in this function the name of the parameter has been omitted
as within C prototypes.]))

(p [If an external function receives an  ,(tt ":int") argument and is passed a Scheme bignum,
which then doesn't fit a ,(emph "long int") in C, the external function will signal
an error. When a  ,(tt ":float") or ,(tt ":double") argument is declared and is passed a
Scheme real that requires so many bits so as to not be representable in that type, that
argument will be silently taken as infinity.])

(fontified-code [
 (define-external c-abs ((fd :int))
     :entry-name "abs"
     :return-type :int)

 (define-external c-fabs ((fd :double))
     :entry-name "fabs"
     :return-type :double)

 (define-external c-fabsf ((fd :float))
     :entry-name "fabsf"
     :return-type :float)
])

(raw-code [
(c-abs (- (expt 2 70)))    ,(symbol-arrow) Error
(c-fabs -1.0e+250)         ,(symbol-arrow) 1e+250
(c-fabsf -1.0e+250)        ,(symbol-arrow) +inf.0
(c-fabs (- (expt 10 300))) ,(symbol-arrow) 1e+300
(c-fabs (- (expt 10 600))) ,(symbol-arrow) +inf.0
])

In the following example we use the ,(tt ":string") type. C functions accepting
pointers to null-terminated strings are directly translated to this type.

The POSIX function ,(,emph "strpbrk") accepts two string arguments (in C, two pointers
to (,emph "char")). The C call ,(emph "strpbrk(str1, str2)") 
pointer to the first occurrence in the string ,(emph str1) of one of the bytes in
the string ,(emph str2).

(fontified-code [
(define-external c-strpbrk ((str :string) (res :string))
    :entry-name "strpbrk"
    :return-type :string)
])

(raw-code [
(c-strpbrk "a string" "rz") => "ring"
])

Note that it would be possible to ues a ,(tt :pointer) type instead for the return
value, although in this case it would be more cumbersome (but does help understand
the FFI better!):

(fontified-code [
(define-external c-strpbrk ((str :string) (res :pointer))
    :entry-name "strpbrk"
    :return-type :string)
])

(raw-code [
(c-strpbrk "a string" "rz")                   => #[C-pointer 7f17baf94d06 @ 7f17bafb4360]
(cpointer->string (c-strpbrk "a string" "rz") => "ring"
])


   (bold "TODO: describe malloc and malloc_atomic and their
interaction with the GC")

;; End of chapter
)