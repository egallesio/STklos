;;;;
;;;; module.stk -- Module stuff
;;;;
;;;; Copyright Â© 2000-2021 Erick Gallesio - I3S-CNRS/ESSI <eg@unice.fr>
;;;;
;;;;
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;;;; USA.
;;;;
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date:  1-Jun-2000 12:26 (eg)
;;;; Last file update: 30-Nov-2021 21:23 (eg)
;;;;


;;=============================================================================
;;
;;                              SYMBOL-VALUE*
;;
;;=============================================================================
#|
<doc EXT symbol-value*
 * (symbol-value* symbol module)
 * (symbol-value* symbol module default)
 *
 * Returns the value bound to |symbol| in |module|. If |symbol| is not bound,
 * an error is signaled if no |default| is provided, otherwise |symbol-value|
 * returns |default|.
 * @l
 * Note that this function searches the value of |symbol| in |module|
 * ,(bold "and") in the STklos module if module is not a R7RS library.
 * only in |module|.
doc>
|#
(define symbol-value*
  (let ((absent (list 'absent))
        (stklos-module (find-module 'STklos)))
    (lambda (name module :optional (default #f default?))
      (let ((val (symbol-value name module absent)))
        (when (and (eq? val absent) (not (library? module)))
          (set! val (symbol-value name stklos-module absent)))
        (if (eq? val absent)
            (if default?
                default
                (error 'symbol-value* "symbol ``~S'' not found" name))
            val)))))

#|
<doc EXT symbol-bound?
 * (symbol-bound symb)
 * (symbol-bound symb module)
 *
doc>
|#
(define symbol-bound?
  (let ((absent (list 'absent)))
    (lambda (symb #:optional (module (current-module)))
      (not (eq? (symbol-value* symb module absent)
                absent)))))


;;=============================================================================
;;
;;                              SELECT-MODULE
;;
;;=============================================================================
#|
<doc EXT-SYNTAX select-module
 * (select-module <name>)
 *
 * Changes the value of the current module to the module with the given |name|.
 * The expressions evaluated after |select-module| will take place in
 * module |name| environment.  Module |name| must have been created
 * previously by a |define-module|. The result of |select-module| is
 * ,(emph "void").
 * |Select-module| is particularly useful when debugging since it
 * allows to place toplevel evaluation in a particular module. The
 * following transcript shows an usage of |select-module|.
 * ,(footnote [This transcript uses the default toplevel loop
 *             which displays the name of the current module in the evaluator
 *             prompt.]):
 * @lisp
 * stklos> (define foo 1)
 * stklos> (define-module bar
 *           (define foo 2))
 * stklos> foo
 * 1
 * stklos> (select-module bar)
 * bar> foo
 * 2
 * bar> (select-module stklos)
 * stklos>
 * @end lisp
doc>
|#

(define-macro (select-module name)
  ;; HACK: try to register the symbols definied in chose module to make
  ;; them known to the compiler (and avoid messages about undefined)
  (let ((mod (find-module name #f)))
    (when (and mod (not (eq? name 'STklos)))
      (register-new-globals! (module-symbols mod))))

  ;; The real expansion of the select-module
  `(%%set-current-module (find-module ',name)))


;;=============================================================================
;;
;;                              DEFINE-MODULE
;;
;;=============================================================================
#|
<doc EXT-SYNTAX define-module
 * (define-module <name> <expr1> <expr2> ...)
 *
 * |Define-module| evaluates the expressions |<expr1>|, |<expr2>| ... which
 * constitute the body of the module |<name>| in the environment of that module.
 * |Name| must be a valid symbol. If this symbol has not already been used to
 * define a module, a new module, named |name|, is created.
 * Otherwise, the expressions |<expr1>|, |<expr2>| ... are evaluated in
 * the environment of the (old) module |<name>|
 * ,(footnote [In fact |define-module| on a given name
 *           defines a new module only the first time it is invoked on this name.
 *           By this way, interactively reloading a module does not define
 *           a new entity, and the other modules which use it are not altered.]).
 * Definitions done in a module are local to the module and do not interact with
 * the definitions in other modules. Consider the following definitions,
 * @lisp
 * (define-module M1
 *    (define a 1))
 *
 * (define-module M2
 *   (define a 2)
 *   (define b (* 2 x)))
 * @end lisp
 *
 * Here, two modules are defined and they both bind the symbol |a| to a
 * value. However, since |a| has been defined in two distinct modules
 * they denote two different locations.
 * @l
 * The |STklos| module, which is predefined, is a special module which
 * contains all the ,(emph "global variables") of a R5RS program.  A symbol
 * defined in the |STklos| module, if not hidden by a local definition, is
 * always visible from inside a module. So, in the previous exemple, the
 * |x| symbol refers the |x| symbol defined in the |STklos| module.
 * @l
 * The result of |define-module| is ,(emph "void").
doc>
|#
(define %modules-stack  '())
(define %module-create  (lambda (name)
                          (set! %modules-stack (cons (current-module)
                                                     %modules-stack))
                          (%create-module name)))

(define %module-restore (lambda ()
                          (let ((previous (car %modules-stack)))
                            (set! %modules-stack (cdr %modules-stack))
                            previous)))

(define %module-handler (lambda (c)
                          (let ((mod (%module-restore)))
                            ;; Push c on the module stack since env will be broken
                            ;; by the module reset!
                            (set! %modules-stack (cons c %modules-stack))
                            (%%set-current-module mod)
                            ;; Hack: Here %module-restore will get back the old c
                            (raise (%module-restore)))))

(define-macro (define-module name . body)
  `(with-handler
      %module-handler
      (%%set-current-module (%module-create ',name))
      ,@body
      (%%set-current-module (%module-restore))
      (values (void) ',name)))


;;=============================================================================
;;
;;                              IMPORT
;;
;;=============================================================================
#|
<doc EXT-SYNTAX import
 * (import <module1> <module2> ...)
 *
 * Specifies the modules which are imported by the current module.
 * Importing a module makes the symbols it exports visible to the
 * importer, if not hidden by local definitions. When a symbol
 * is exported by several of the imported modules, the location denoted by
 * this symbol in the importer module correspond to the one of the last module
 * in the list
 * @lisp
 * (<module1> <module2> ...)
 * @end lisp
 * which exports it.
 * @l
 * If several |import| clauses appear in a module, the set of
 * imported modules  is determined by appending the various list of modules
 * in their apparition order.
 *
 * @lisp
 * (define-module M1
 *   (export a b)
 *   (define a 'M1-a)
 *   (define b 'M1-b))
 *
 * (define-module M2
 *   (export b c d)
 *   (define b 'M2-b)
 *   (define c 'M2-c)
 *   (define d 'M2-d))
 *
 * (define-module M3
 *   (import M1 M2)
 *   (display (list a b c d)))  @print{} (M1-a M2-b M2-c M2-d)
 *
 * (define-module M4
 *   (import M2 M1)
 *   (display (list a b c d)))  @print{} (M1-a M1-b M2-c M2-d)
 * @end lisp
 *
 * It is also possible to import partially (i.e. not all
 * exported symbols) from a module, as shown below:
 * @lisp
 * (define-module M5
 *   (import (M2 c d) M1)
 *   (display (list a b c d)))  @print{} (M1-a M1-b M2-c M2-d)
 * @end lisp
 * In this case, only the symbols |c| and |d| are imported from
 * module |M2|.
 * @l
 * ,(bold "Note:") Importations are not ,(emph "transitive"): when
 * the module ,(emph "C") imports the module ,(emph "B") which is an importer
 * of module ,(emph "A") the symbols of ,(emph "A") are not visible
 * from ,(emph "C"), except  by explicitly importing the ,(emph "A")
 * module from ,(emph "C").
 * @l
 * ,(bold "Note:") The module |STklos|, which contains the ,(emph "global
 * variables") is always implicitly imported from a module. Furthermore,
 * this module is always placed at the end of the list of imported modules.
doc>
|#
(define (%parse-imports imports)

  (define (parse import-set)
    ;; Build a key-list of the import-set. If the import-set is
    ;;       (prefix (only (a b) x y z) foo-),
    ;; it returns a list of the form
    ;;       (a/b #:only (x y z) #:prefix foo-)
    (cond
     ((list? import-set)
      (let ((key (car import-set)))
        (case key

          ((only)
           (if (>= (length import-set) 3)
               (let ((ids (cddr import-set)))
                 (unless (every symbol? ids)
                   (error 'import "bad list of symbols ~s in only clause"
                          ids key))
                 `(,@(parse (cadr import-set)) #:only ,ids))
               (error 'inport "bad only clause ~s" import-set)))

          ((except)
           (if (>= (length import-set) 3)
               (let ((ids (cddr import-set)))
                 (unless (every symbol? ids)
                   (error 'import "bad list of symbols ~s in except clause" ids))
                 `(,@(parse (cadr import-set)) #:except ,ids))
               (error 'inport "bad except clause ~s" import-set)))

          ((prefix)
           (if (and (= (length import-set) 3)
                    (symbol? (caddr import-set)))
               `(,@(parse (cadr import-set)) #:prefix ,(caddr import-set))
               (error 'inport "bad prefix clause ~s" import-set)))

          ((rename)
           (if (>= (length import-set) 3)
               (let ((assocs (cddr import-set)))
                 ;; Verify that all the assocs are well formed
                 (unless (every (lambda (x)
                                  (and (list? x) (= (length x) 2)
                                       (symbol? (car x)) (symbol? (cadr x))))
                                assocs)
                   (error 'import "bad list of associations ~s in rename clause"
                          assocs))
                 `(,@(parse (cadr import-set)) #:rename ,assocs))
               (error 'inport "bad rename clause ~s" import-set)))

          (else
           (list (%library-name->symbol import-set))))))

     ((symbol? import-set)
      ;; a "legacy" STklos module
      (list import-set))

     (else
      (error 'import "bad import set ~s" import-set))))
  ;;
  ;; Return a list of parsed imports
  ;;
  (map parse imports))


(define (%do-imports lib clauses)

  (define (eventually-load-library name)
    (let ((module (find-module name #f)))
      (or module
          ;; Try to load a file which could define this module
          (begin
            (require/provide (symbol->string name))

            ;; Verify that the module was correctly defined in this file
            (let ((mod (find-module name #f)))
              (unless mod
                (error 'import "module/library ~s does not exist"
                       (%symbol->library-name name)))
              mod)))))


  (define (build-import-list lib lst imported)
    (if (null? lst)
        imported
        (let ((key  (car lst))
              (val  (cadr lst))
              (rest (cddr lst)))
          (case key
            ((#:only)
             (let ((public (map cdr imported)))
               (for-each (lambda (symb)
                           (unless (memq symb public)
                             (error 'import "only: symbol ~s is not in the import set"
                                    symb)))
                         val)
               (set! imported (filter! (lambda (x) (memq (cdr x) val)) imported))))

            ((#:except)
             (let ((public (map cdr imported)))
               (for-each (lambda (symb)
                           (if (memq symb public)
                               (set! imported (remove (lambda (x) (eq? (cdr x) symb)) imported))
                               (error 'import "except: symbol ~s is not in the import set" symb)))
                         val)))
            ((#:rename)
             (for-each (lambda (pair)
                         (let ((original (car pair))
                               (new      (cadr pair)))
                           (let Loop ((lst imported))
                             (if (null? lst)
                                 (error 'import
                                        "rename: symbol ~s is not in the import set" original)
                                 (if (eq? (cdar lst) original)
                                     (set-cdr! (car lst) new)
                                     (Loop (cdr lst)))))))
                       val))
            ((#:prefix)
             (for-each (lambda (pair)
                         (set-cdr! pair (symbol-append val (cdr pair))))
                       imported)))
          ;; Loop with the rest of lst
          (build-import-list lib rest imported))))


  (define (import-symbols importer name keylist)
    (let* ((mod       (eventually-load-library name))
           (imported  (build-import-list mod
                                         keylist
                                         (list-copy (module-exports mod)))))
      ;; Make aliases for all symbols in imported list
            (for-each (lambda (pair)
                  (%symbol-link (cdr pair) (car pair) lib mod)
                  (register-new-global! (cdr pair)))
                imported)))

  ;; Call import-symbols for each import spec
  (for-each (lambda (imp)
              (let ((name     (car imp))
                    (keylist  (cdr imp)))
                (import-symbols lib name keylist)))
            clauses)

  ;; Retain the import list (for module-imports)
  (%module-imports-set! lib (append! (module-imports lib)
                                     clauses)))

;;;;
;;;; IMPORT
;;;;
(define-macro (import . modules)
  (let ((imp (%parse-imports modules)))
    ;; Since imported modules can define macros. We need to grab them
    ;; in case we are just compiling a file to produce a '.ostk' file
    (for-each (lambda (x)
                (%grab-file-information (symbol->string (car x))))
              imp)
    ;; Run time expansion
    `(%do-imports (current-module) (list-copy ',imp))))


;;=============================================================================
;;
;;                              EXPORT
;;
;;=============================================================================
#|
<doc EXT-SYNTAX export
 * (export <symbol1> <symbol2> ...)
 *
 * Specifies the symbols which are exported (i.e. ,(emph "visible")) outside
 * the current module. By default, symbols defined in a module are not
 * visible outside this module, excepted if they appear in an |export|
 * clause.
 * @l
 * If several |export| clauses appear in a module, the set of
 * exported symbols is determined by ``,(emph "unionizing")'' symbols exported
 * in all the |export| clauses.
 * @l
 * The result of |export| is ,(emph "void").
doc>
|#


(define (%parse-exports symbols)
  ;; Used at compile-time: returns a list of pairs ((name . exported-name) ... )

  (let Loop ((l symbols) (res '()))
    (cond
     ((null? l)
          ;; Hack to avoid useless compilation messages.
          (register-new-globals!  (map car res))
          (reverse! res))
     ((symbol? (car l))
          ;; export a single identifier
          (let ((s (car l)))
            (Loop (cdr l)
                  (cons (cons s s)
                        res))))
     ((and (pair? (car l)) (eq? (caar l) 'rename))
          ;; export with renaming: (rename old new)
          (let ((symbs (cdar l)))
            (unless (and (= (length symbs) 2)
                         (symbol? (car symbs))
                         (symbol? (cadr symbs)))
              (error 'export "bad renaming clause ~S" (car l)))
            (Loop (cdr l)
                  (cons (cons (car symbs) (cadr symbs))
                        res))))
     (else
          (error 'export "bad exportation `~S'" (car l))))))


(define (%do-exports lib symbols)

  (define (add-symbol name rename lst)
    (let ((old (assq name lst)))
      (if old
          (let ((old-rename (cdr old)))
            (unless (or (eq? name old-rename)
                        (eq? old-rename rename))
              (error 'export "exported symbol ~s was previously renamed as ~S"
                     name old-rename))
            (set-cdr! old rename)
            lst)
          (cons (cons name rename) lst))))

  (let Loop ((l symbols) (res (module-exports lib)))
    (cond
     ((null? l) (%module-exports-set! lib res))
     (else
          (let ((symbs (car l)))
            (Loop (cdr l)
                  (add-symbol (car symbs) (cdr symbs) res)))))))


;;;;
;;;; EXPORT
;;;;
(define-macro (export . symbols)
  (let ((s (%parse-exports symbols)))
    `(%do-exports (current-module) ',s)))


;;//;; FIXME: For compatibility (should be deleted soon)
;;//(define (%module-export module . symbols)
;;//  (%do-exports module symbols))


(define-macro (export-syntax . arg)
  ;; This is only an approximation. Must be rewritten
  `(%%publish-syntax ,@arg))

;;=============================================================================
;;
;;                              IN-MODULE
;;
;;=============================================================================
#|
<doc EXT-SYNTAX in-module
 * (in-module mod s)
 * (in-module mod s default)
 *
 * This form returns the value of symbol with name |s| in the module with name
 * |mod|. If this symbol is not bound,  an error is signaled if no |default| is
 * provided, otherwise |in-module| returns |default|. Note that the value of |s|
 * is searched in |mod| and all the modules it imports.
 * @l
 * This form is in fact a shortcut. In effect,
 * @lisp
 * (in-module my-module foo)
 * @end lisp
 * @l
 * is equivalent to
 * @lisp
 * (symbol-value* 'foo (find-module 'my-module))
 * @end lisp
doc>
|#
(define-macro (in-module mod symb . default)
  `(apply symbol-value* ',symb (find-module ',mod) ',default))
