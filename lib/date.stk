;;;;
;;;; date.stk                   -- Date and Time Operations
;;;;
;;;; Copyright Â© 2002-2022 Erick Gallesio - I3S-CNRS/ESSI <eg@unice.fr>
;;;;
;;;;
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;;;; USA.
;;;;
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date:  3-Apr-2002 10:06 (eg)
;;;; Last file update: 12-May-2022 15:49 (eg)
;;;;


(export time? time->seconds seconds->time make-date date? seconds->date
        date-second date-minute date-hour
        date-day date-month date-year
        date-week-day date-year-day
        date-dst date-tz
        seconds->list current-date seconds->string date->string)


;;;; ======================================================================
;;;;
;;;;                    TIME functions
;;;;
;;;; ======================================================================

#|
<doc EXT time?
 * (time? obj)
 *
 * Return |%t| if |obj| is a time object, othererwise returns |%f|.
doc>
|#
(define (time? obj)
  (and (struct? obj) (eq? (struct-type obj) %time)))


#|
<doc EXT time->seconds
 * (time->seconds time)
 *
 * Convert the time object |time| into an inexact real number representing
 * the number of seconds elapsed since the Epoch.
 * @lisp
 * (time->seconds (current-time))  ==>  1138983411.09337
 * @end lisp
doc>
|#
(define (time->seconds time)
  (if (time? time)
      (exact->inexact (+ (%fast-struct-ref time %time 'second 1)
                         (/ (%fast-struct-ref time %time 'nanosecond 2)
                            #e1e9)))
      (error 'time-seconds "bad time ~S" time)))


#|
<doc EXT seconds->time
 * (seconds->time x)
 *
 * Converts into a time object the real number |x| representing the number
 * of seconds elapsed since the Epoch.
 * @lisp
 * (seconds->time (+ 10 (time->seconds (current-time))))
 *          ==>  a time object representing 10 seconds in the future
 * @end lisp
doc>
|#
(define (seconds->time x)
  (if (and (number? x) (positive? x))
      (cond
        ((real? x)
         (let ((n (inexact->exact (round (* x #e1e9)))))
           (make-struct %time :time-utc (quotient n #e1e9) (remainder n #e1e9))))
        ((integer? x)
         (make-struct %time  x 0))
        (else
         (error 'seconds->time "cannot convert ~S to a time" x)))
      (error 'seconds->time "bad number ~S" x)))


;;;; ======================================================================
;;;;
;;;;                    DATE functions
;;;;
;;;; ======================================================================
#|
<doc EXT make-date
 * (make-date :key second minute hour day month year)
 *
 * Build a date from its argument. |hour|, |minute|, |second|, |nanosecond|
 * default to 0; |day| and |month| default to 1; |year| defaults to 1970
doc>
|#
(define (make-date :key (nanosecond 0) (second 0) (minute 0) (hour 0)
                        (day 1) (month 1) (year 1970))
  (let ((tmp (make-struct %date second minute hour day month year)))
    ;; tmp is probably partially initialized convert it to seconds and back
    ;; to a date
    (seconds->date (date->seconds tmp))))

#|
<doc EXT date?
 * (date? obj)
 *
 * Return |%t| if |obj| is a date, and otherwise returns |%f|.
doc>
|#
(define (date? obj)
  (and (struct? obj) (eq? (struct-type obj) %date)))



(define (seconds->date s)
  (%seconds->date (if (real? s) (inexact->exact (round s)) s)))

;; ======================================================================
;;      date writer
;; ======================================================================
(struct-type-change-writer!
   %date
   (lambda (s port)
     (format port "#[date ~A-~A-~A ~A:~A:~A]"
             (struct-ref s 'year) (struct-ref s 'month) (struct-ref s 'day)
             (struct-ref s 'hour) (struct-ref s 'minute) (struct-ref s 'second))))


#|
<doc EXT date-nanosecond
 * (date-nanosecond d)
 *
 * Return the nanosecond of date |d|.
doc>
<doc EXT date-second
 * (date-second d)
 *
 * Return the second of date |d|, in the range 0 to 59.
doc>
<doc EXT date-minute
 * (date-minute d)
 *
 * Return the minute of date |d|, in the range 0 to 59.
doc>
<doc EXT date-hour
 * (date-hour d)
 *
 * Return the hour of date |d|, in the range 0 to 23.
doc>
<doc EXT date-day
 * (date-day d)
 *
 * Return the day of date |d|, in the range 1 to 31
doc>
<doc EXT date-month
 * (date-month d)
 *
 * Return the month of date |d|, in the range 1 to 12
doc>
<doc EXT date-year
 * (date-year d)
 *
 * Return the year of date |d|.
doc>
<doc EXT date-week-day
 * (date-week-day d)
 *
 * Return the week day of date |d|, in the range 0 to 6 (0 is Sunday).
doc>
<doc EXT date-year-day
 * (date-year-day d)
 *
 * Return the the number of days since January 1 of date |d|, in the range
 * 1 to 366.
doc>
<doc EXT date-dst
 * (date-dst d)
 *
 * Return an indication about daylight saving adjustment:
 *
 * - 0 if no daylight saving adjustment
 * - 1 if daylight saving adjustment
 * - -1 if the information is not available
doc>
<doc EXT date-tz
 * (date-tz d)
 *
 * Return the time zone of date |d|.
doc>
|#
(define (date-nanosecond d)     (%fast-struct-ref d %date 'date-nanosecond 0))
(define (date-second d)         (%fast-struct-ref d %date 'date-second 1))
(define (date-minute d)         (%fast-struct-ref d %date 'date-minute 2))
(define (date-hour d)           (%fast-struct-ref d %date 'date-hour 3))

(define (date-day d)            (%fast-struct-ref d %date 'date-day 4))
(define (date-month d)          (%fast-struct-ref d %date 'date-month 5))
(define (date-year d)           (%fast-struct-ref d %date 'date-year 6))

(define (date-week-day d)       (%fast-struct-ref d %date 'date-week-day 7))
(define (date-year-day d)       (%fast-struct-ref d %date 'date-year-day 8))

(define (date-dst d)            (%fast-struct-ref d %date 'date-dst 9))
(define (date-tz d)             (%fast-struct-ref d %date 'date-tz 10))


#|
<doc EXT seconds->list
 * (seconds->list sec)
 *
 * Returns a keyword list for the date given by |sec| (a date based on the
 * Epoch). The keyed values returned are
 *
 * - nanosecond : 0 to 999999
 * - second : 0 to 59 (but can be up to 61 to allow for leap seconds)
 * - minute : 0 to 59
 * - hour : 0 to 23
 * - day : 1 to 31
 * - month : 1 to 12
 * - year : e.g., 2002
 * - week-day : 0 (Sunday) to 6 (Saturday)
 * - year-day : 0 to 365 (365 in leap years)
 * - dst : indication about daylight savings time
 *   (see _<<datedst, primitive `date-dst`>>_).
 * - tz : the difference between Coordinated Universal Time
 *   (UTC) and local standard time in seconds.])
 *
 * @lisp
 * (seconds->list (current-second))
 *        => (#:nanosecond 182726 #:second 21 #:minute 35 #:hour 20 #:day 10 #:month 1
 *            #:year 2022 #:week-day 1 #:year-day 10 #:dst 0 #:tz -3600)
 * @end lisp
doc>
|#
(define (seconds->list sec)
  (apply append (map (lambda (x)
                       (list (make-keyword (car x)) (cdr x)))
                     (struct->list (seconds->date sec)))))


#|
<doc EXT current-date
 * (current-date)
 *
 * Returns the current system date.
doc>
|#
(define (current-date)
  (seconds->date (current-second)))

#|
<doc EXT seconds->string
 * (seconds->string format n)
 *
 * Convert a date expressed in seconds using the string |format| as a
 * specification. Conventions for |format| are given below:
 *
 *  - *~~* a literal ~
 *  - *~a* locale's abbreviated weekday name (Sun...Sat)
 *  - *~A* locale's full weekday name (Sunday...Saturday)
 *  - *~b* locale's abbreviate month name (Jan...Dec)
 *  - *~B* locale's full month day (January...December)
 *  - *~c* locale's date and time
 *         (e.g., ,(code "Fri Jul 14 20:28:42-0400 2000"))
 *  - *~d* day of month, zero padded (01...31)
 *  - *~D* date (mm/dd/yy)
 *  - *~e* day of month, blank padded ( 1...31)
 *  - *~f* seconds+fractional seconds, using locale's
 *         decimal separator (e.g. 5.2).
 *  - *~h* same as ~b
 *  - *~H* hour, zero padded, 24-hour clock (00...23)
 *  - *~I* hour, zero padded, 12-hour clock (01...12)
 *  - *~j* day of year, zero padded
 *  - *~k* hour, blank padded, 24-hour clock (00...23)
 *  - *~l* hour, blank padded, 12-hour clock (01...12)
 *  - *~m* month, zero padded (01...12)
 *  - *~M* minute, zero padded (00...59)
 *  - *~n* new line
 *  - *~p* locale's AM or PM
 *  - *~r* time, 12 hour clock, same as +"~I:~M:+~S ~p"
 *  - *~s* number of full seconds since _the epoch_ (in UTC)
 *  - *~S* second, zero padded (00...61)
 *  - *~t* horizontal tab
 *  - *~T* time, 24 hour clock, same as +"~H:~M:~S"+
 *  - *~U* week number of year with Sunday as first day of week
 *         (00...53)
 *  - *~V* weekISO 8601:1988 week number of year (01...53)
 *         (week 1 is the first week that has at least 4 days in
 *         the current year, and  with  Monday  as  the first day
*          of the week)
 *  - *~w* day of week (1...7, 1 is Monday)
 *  - *~W* week number of year with Monday as first day of week
 *         (01...52)
 *  - *~x* week number of year with Monday as first day of week
 *         (00...53)
 *  - *~X* locale's date representation, for example: "07/31/00"
 *  - *~y* last two digits of year (00...99)
 *  - *~Y* year
 *  - *~z* time zone in RFC-822 style
 *  - *~Z* symbol time zone

doc>
|#
(define (seconds->string format seconds)
  (unless (string? format)
    (error 'seconds->string "bad string ~S" format))
  ;; Convert the format string for C since conventions are different
  (let ((len (string-length format))
        (out (open-output-string))
        (sec (if (real? seconds) (inexact->exact (round seconds)) seconds)))
    (let Loop ((i 0))
      (when (< i len)
        (let ((cur-char (string-ref format i)))
          (case cur-char
            ((#\%) ;; "%" ==> "%%"
             (display "%%" out) (Loop (+ i 1)))
            ((#\~) (if (and (< i (- len 1)) (eq? (string-ref format (+ i 1)) #\~))
                       (begin
                         ;; "~~" => "~"
                         (display #\~ out)
                         (Loop (+ i 2)))
                       (begin
                         ;; "~c" => "%c" where c is not a %
                         (display #\% out)
                         (Loop (+ i 1)))))
            (else (display cur-char out)
                  (Loop (+ i 1)))))))
    ;; String is converted in the "OUT" string port
    (%seconds->string (get-output-string out) sec)))

#|
<doc EXT date->string
 * (date->string format d)
 *
 * Convert the date |d| using the string |format| as a
 * specification. Conventions for format are the same as the one
 * of _<<seconds2string, primitive `seconds->string`>>_.
doc>
|#
(define (date->string format date)
  (unless (string? format)
    (error 'date->string "bad string ~S" format))

  (seconds->string format (date->seconds date)))
