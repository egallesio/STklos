;;;;
;;;; help.stk           -- Interactive help
;;;;
;;;; Copyright Â© 2009-2020 Erick Gallesio - Polytech'Nice-Sophia <eg@unice.fr>
;;;;
;;;;
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;;;; USA.
;;;;
;;;; This file is the re-implementation of a code given to me by
;;;; Michael Feyereisen [mfeyereisen@gmail.com]. Thanks to him for
;;;; having pushed me to finally implement the help function.
;;;;
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date: 20-Dec-2009 18:26 (eg)
;;;; Last file update: 15-Aug-2020 17:48 (eg)
;;;;

;; ----------------------------------------------------------------------
;; Database reading
;; ----------------------------------------------------------------------
(define (read-database name)
  (let ((f (open-file name "r")))
    (if f
        (let Loop ((res '())
                   (item (read f)))
          (if (eof-object? item)
              (begin (close-port f) res)
              (Loop (cons item res) (read f))))
        ;; file cannot be opened
        (begin
          (eprintf "Warning: cannot open ~S.\n" name)
          '()))))

(define *the-doc*
  (read-database (make-path (%library-prefix) "share" "stklos" (version) "DOCDB")))


;; ----------------------------------------------------------------------
;; pretty-doc ...
;; ----------------------------------------------------------------------
(define (pretty-doc str)
  ;; suppress some common Skribe things from the doc string
  (set! str (regexp-replace-all ",(linebreak)" str ""))
  (set! str (regexp-replace-all "@lisp" str (do-color (get-repl-color :help))))
  (set! str (regexp-replace-all "@end lisp" str (do-color 'normal)))
  str)


;; ----------------------------------------------------------------------
;; find-documentation
;; ----------------------------------------------------------------------
(define-generic find-documentation)

(define-method find-documentation ((self <symbol>))
  (let* ((doc (assoc self *the-doc*))
         (see (and doc (key-get (cdr doc) :see #f))))
    (cond
      (see
         ;; the symbol is indirectly documented
         (find-documentation see))
      (doc
         ;; found documentation. Format it a little bit
         (pretty-doc (string-append (key-get (cdr doc) :synopsis)
                                    "\n\n"
                                    (key-get (cdr doc) :description)
                                    "\n")))
      ((char=? (string-ref (symbol->string self) 0) #\%)
        (string-append
          "Symbols beginning with '%' are intended for low-level use \n"
          "and have therefore been left undocumented.\n"
          "Furthermore, they can be changed without notice. Don't use them.\n"))
      (else
         ;; no documentation
         #f))))


(define-method find-documentation ((self <procedure>))
  (let ((doc (%procedure-doc self)))
    (or doc
        (let ((name (%procedure-name self)))
          (and (string? name)
               (find-documentation (string->symbol name)))))))

(define-method find-documentation ((self <generic>))
  (or (generic-function-documentation self)
      (find-documentation (generic-function-name self))))

(define-method find-documentation ((self <method>))
  (find-documentation (method-procedure self)))

(define-method find-documentation (obj)
  #f)

;; ----------------------------------------------------------------------
;; help
;; ----------------------------------------------------------------------
#|
<doc EXT help
 * (help obj)
 * (help)
 *
 * When called with an argument, |help| tries to give some help on the
 * given object, which could be a symbol, a procedure, a generic function
 * or a method. Whe called called without arguments, |help| enters a
 * read-help-print loop. The documentation for an object is searched in
 * the object itself or, if absent, in STklos documentation.  Inserting
 * the documentation in an objet is very similar to Emacs docstrings: a
 * documentation string is defined among the code. Exemples of such
 * strings are given below
 * @lisp
 * (define (foo n)
 *   "If the function body starts with a string, it's a docstring"
 *   (+ n 1))
 *
 * (define-generic bar
 *   :documentation "Generic function docsting for bar")
 *
 * (define-method bar ((x <integer>))
 *   "Probably less useful: as in functions, methods can have docstrings"
 *   (- x 1))
 * @end lisp
doc>
|#

;; Returns the name of the object, if it is a procedure, or
;; default if it has no name or if it is not a procedure.
;; If default is ommited, it is taken to be obj itself.
(define (%get-object-name obj . default)
  (let ((def (if (null? default)
                 obj
                 (car default))))
    (if (procedure? obj)
        (let* ((name (%procedure-name obj)))
          (if (string? name)
              (string->symbol name)
              def))
        def)))

;; Returns the signature of an object in a human-friendly form.
;; (f x y), or
;; (_ x y)  if it is unnamed.
(define (%help-signature obj)
  (if (procedure? obj)
      (let* ((sig (%procedure-signature obj)))
        (if sig
            (cons (%get-object-name obj '_) sig)
            #f))
      #f))

(define-method help (obj)
  (let ((doc  (find-documentation obj))
        (sig  (%help-signature obj))
        (name (%get-object-name obj))
        (pr   (lambda (str)
                (for-each (lambda (line) (printf "  ~A\n" line))
                          (string-split str "\n")))))
    (if (or sig doc)
        (begin
          (display (ansi-color 'bold 'yellow (format #f "Help for ~a:" name) 'normal "\n"))
          (when sig
            (display (ansi-color 'bold "Signature:" 'normal (format #f "\n  ~S\n" sig))))
          (when doc
            (display (ansi-color 'bold "Documentation:" 'normal "\n"))
            (pr doc)))
          (display (ansi-color 'bold 'yellow (format #f "No help for ~a" name) 'normal "\n")))))


(define-method help ()
  ;; Interactive help
  (display (do-color (get-repl-color :help)
                     "You are in the interactive STklos help. "
                     "Enter an *eof* to exit\n"))
  (let Loop ((prompt (do-color (get-repl-color :help-prompt)
                               "help> " 'none)))
    (display prompt) (flush-output-port)
    (let ((name  (read))
          (color (get-repl-color :error)))
      (unless (eof-object? name)
        (if (symbol? name)
            (let ((val (symbol-value* name (current-module) #f)))
              (if val
                  (let ((sig (%help-signature val)))
                    (when sig (printf "Signature: ~a\n" sig))
                    (display (find-documentation val)))
                  (display (do-color color (format "Symbol ~S is unbound\n" name)))))
            (display (do-color color "help only accepts symbols.\n")))
        (Loop prompt))))
  (display "done.\n"))

(provide "help")
