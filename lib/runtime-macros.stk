;;;;
;;;;
;;;; runtime-macros.stk         -- Macros available at bootstrap
;;;;
;;;; Copyright © 2022-2025 Erick Gallesio <eg@stklos.net>
;;;;
;;;;
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;;;; USA.
;;;;
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date: 14-Apr-2022 15:55
;;;;

;; NOTE: Force the module to STklos (this is the case by default, EXCEPT that
;; it is STKLOS-COMPILER when we are bootstrapping.
(select-module STklos)


;; ======================================================================
;;
;; Define here primordial syntax with low level macros
;;
;; ======================================================================
(define-macro (define-macro . args)  `(%%define-macro ,@args)) ;; Funny, isn't it?
(define-macro (if . args)            `(%%if ,@args))
(define-macro (define . args)        `(%%define ,@args))
(define-macro (begin . args)         `(%%begin ,@args))
(define-macro (and . args)           `(%%and ,@args))
(define-macro (or . args)            `(%%or ,@args))
(define-macro (cond . args)          `(%%cond ,@args))
(define-macro (case . args)          `(%%case ,@args))
(define-macro (do . args)            `(%%do ,@args))
(define-macro (let . args)           `(%%let ,@args))
(define-macro (let* . args)          `(%%let* ,@args))
(define-macro (letrec . args)        `(%%letrec ,@args))
(define-macro (with-handler . args)  `(%%with-handler ,@args))
;(define-macro (|λ| . args)           `(%%lambda ,@args))
(define-macro (lambda . args)             `(%%lambda ,@args))
(define-macro (quote . args)         `(%%quote ,@args))
(define-macro (set! . args)          `(%%set! ,@args))

;;;;
;;;; WHEN/UNLESS
;;;;
(define-macro (when . args)
  (if (<= (length args) 1)
      (syntax-error 'when "bad syntax in ~S" `(when ,@args))
      `(if ,(car args) (begin ,@(cdr args)))))

(define-macro (unless . args)
  (if (<= (length args) 1)
      (syntax-error 'unless "bad syntax in ~S" `(unless ,@args))
      `(if (not ,(car args)) (begin ,@(cdr args)))))

;;;;
;;;; QUASIQUOTE
;;;;
(define-macro (quasiquote expr)
  (define (backquotify e level)
    (cond
      ((pair? e)
         (cond
           ((eq? (car e) 'quasiquote)
                 (list 'list ''quasiquote
                       (backquotify (cadr e) (+ level 1))))
           ((eq? (car e) 'unquote)
                 (if (<= level 0)
                     (cadr e)
                     (list 'list ''unquote
                           (backquotify (cadr e) (- level 1)))))
           ((eq? (car e) 'unquote-splicing)
                (if (<= level 0)
                    (list 'cons
                          (backquotify (car e) level)
                          (backquotify (cdr e) level))
                    (list 'list ''unquote-splicing
                          (backquotify (cadr e) (- level 1)))))
           ((and (<= level 0) (pair? (car e)) (eq? (caar e) 'unquote-splicing))
                (if (null? (cdr e))
                    (cadar e)
                    (list 'append (cadar e)
                          (backquotify (cdr e) level))))
           (else
                (list 'cons
                      (backquotify (car e) level)
                      (backquotify (cdr e) level)))))
      ((vector? e)
         (list 'list->vector (backquotify (vector->list e) level)))
      ((symbol? e)
         (list 'quote e))
      (else
       e)))

  ;; Body of quasiquote starts here
  (backquotify expr 0))


;; ----------------------------------------------------------------------
;; syntax-error
;; ----------------------------------------------------------------------
(define-macro (syntax-error . args)
  (if (zero? (length args))
      (error 'syntax-error "needs at least one argument")
      `(%syntax-error ,@args)))
