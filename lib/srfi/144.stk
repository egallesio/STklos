
(select-module srfi/144)

(%compile-time-define fl/ fllog %flinteger-exponent flinteger-fraction
                      %fl-integer-exponent-nan  %fl-integer-exponent-zero)

(export ;; constants:
        fl-integer-exponent-zero
        fl-integer-exponent-nan
        
        ;; arithmetic:
        flnumerator
        fldenominator
        flround

        ;; accessors:
        flinteger-exponent

        ;; exponents and logarithms:
        make-fllog-base)

;;;
;;; CONSTANTS -- DONE
;;;

;; these are defined as inexacts in the C code and defined again here
;; with their proper name becuse defining exact constants in C would
;; require us to include more parts of number.c in srfi-144.c, and it
;; wasn't worth it.
(define fl-integer-exponent-zero (inexact->exact %fl-integer-exponent-zero))
(define fl-integer-exponent-nan  (inexact->exact %fl-integer-exponent-nan))

;;;
;;; CONSTRUCTORS -- DONE
;;;
;; (define (flonum n)
;;   (if (real? n) (inexact n) +nan.0))

;;;
;;; ARITHMETIC -- DONE
;;;

(define (flnumerator x)
  (cond ((or (infinite? x) (nan? x) (zero? x))
         x) ; -0.0 is handled here
        ((let-values (( (i f) (flinteger-fraction x))) (zero? f))
         x)
        (else
         (exact->inexact (numerator (exact x))))))

;; From Gauche:
(define (fldenominator x)
  (cond ((or (infinite? x) (zero? x)) 1.0)
        ((nan? x) x)
        (else (exact->inexact (denominator (exact x))))))

(define (flround x)
  (assume (flonum? x))
  (round x))

;;;
;;; ACCESSORS -- DONE
;;;

;; FIXME: check it %flinteger-exponent is necessary
(define (flinteger-exponent x)
  (inexact->exact (%flinteger-exponent x)))

;;;
;;; EXPONENTS AND LOGARITHMS -- DONE
;;;

;; FIXME: inefficient?
(define (make-fllog-base base)
  (lambda (x) (fl/ (fllog x) (fllog base))))

;;;
;;; TRIGONOMETRIC FUNCTIONS -- DONE
;;;

;;;
;;; INTEGER DIVISION -- DONE
;;;

;;;
;;; SPECIAL FUNCTIONS -- DONE
;;;

(provide "srfi/144")
