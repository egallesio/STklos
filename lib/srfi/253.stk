;; SPDX-FileCopyrightText: 2024 Artyom Bologov
;; SPDX-License-Identifier: MIT

;;;
;;;
;;; 253.stk         -- Implementation of SRFI-253
;;;
;;; This code is an adaptation of the SRFI sample implementation. Its
;;; original copyright is reproduced below:
;;;;
;;; Permission is hereby granted, free of charge, to any person
;;; obtaining a copy of this software and associated documentation
;;; files (the "Software"), to deal in the Software without
;;; restriction, including without limitation the rights to use,
;;; copy, modify, merge, publish, distribute, sublicense, and/or
;;; sell copies of the Software, and to permit persons to whom the
;;; Software is furnished to do so, subject to the following
;;; conditions:
;;;
;;; The above copyright notice and this permission notice shall be
;;; included in all copies or substantial portions of the Software.
;;;
;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
;;; OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;;; NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
;;; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
;;; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
;;; OTHER DEALINGS IN THE SOFTWARE.

(define-module (srfi 253)
  (export check-arg values-checked
          check-case %check-case
          lambda-checked %lambda-checked
          define-checked
          case-lambda-checked %case-lambda-checked
          define-record-type-checked %define-record-type-checked %wrap-constructor)

  (import (scheme base)
          (scheme case-lambda)
          (srfi 227))


(define-syntax check-arg
  (syntax-rules (integer?
                 exact-integer? boolean? char? complex? real? inexact?
                 pair? number? null?
                 procedure? rational? string? symbol? keyword? vector? fixnum?

                 <boolean> <char> <complex> <real> <pair> <number> <null>
                 <procedure> <rational> <string> <symbol> <keyword> <vector>
                 <fixnum>)
    ((_ integer? val caller)
     (assume (is-a? val <integer>) "type mismatch" caller))
    ((_ exact-integer? val caller)
     (assume (is-a? val <integer>) "type mismatch" caller))
    ((_ boolean? val caller)
     (assume (is-a? val <boolean>) "type mismatch" caller))
    ((_ char? val caller)
     (assume (is-a? val <char>) "type mismatch" caller))
    ((_ complex? val caller)
     (assume (is-a? val <complex>) "type mismatch" caller))
    ((_ real? val caller)
     (assume (is-a? val <real>) "type mismatch" caller))
    ((_ inexact? val caller)
     (assume (is-a? val <real>) "type mismatch" caller))
    ((_ pair? val caller)
     (assume (is-a? val <pair>) "type mismatch" caller))
    ((_ null? val caller)
     (assume (is-a? val <null>) "type mismatch" caller))
    ((_ number? val caller)
     (assume (is-a? val <number>) "type mismatch" caller))
    ((_ procedure? val caller)
     (assume (is-a? val <procedure>) "type mismatch" caller))
    ((_ rational? val caller)
     (assume (is-a? val <rational>) "type mismatch" caller))
    ((_ string? val caller)
     (assume (is-a? val <string>) "type mismatch" caller))
    ((_ symbol? val caller)
     (assume (is-a? val <symbol>) "type mismatch" caller))
    ((_ keyword? val caller)
     (assume (is-a? val <keyword>) "type mismatch" caller))
    ((_ vector? val caller)
     (assume (is-a? val <vector>) "type mismatch" caller))
    ((_ fixnum? val caller)
     (assume (is-a? val <fixnum>) "type mismatch" caller))
    ((_ pred val)
     (check-arg pred val 'check-arg))
    ((_ pred val caller)
     (assume (pred val) "argument should match the specification"  '(pred val)
             caller))))

;; ----------------------------------------------------------------------
(define-syntax values-checked
  (syntax-rules ()
    ((_ (predicate) value)
     (let ((v value))
       (check-arg predicate v 'values-checked)
       v))
    ((_ (predicate ...) value ...)
     (values (values-checked (predicate) value) ...))))

;; ----------------------------------------------------------------------
(define-syntax %check-case
  (syntax-rules (else)
    ((_ val (clause ...) (else body ...))
     (cond
      clause ...
      (else body ...)))
    ((_ val ((clause-check clause-body ...) ...))
     (cond
      (clause-check clause-body ...)
      ...
      (else (assume (or clause-check ...)
                    "at least one branch of check-case should be true"
                    'clause-check ...))))
    ((_ val (clause ...) (pred body ...) rest ...)
     (%check-case
      val
      (clause ... ((pred val) body ...))
      rest ...))))

(define-syntax check-case
  (syntax-rules ()
    ((_ value clause ...)
     (let ((v value))
       (%check-case v () clause ...)))))

;; ----------------------------------------------------------------------
(define-syntax %lambda-checked
  (syntax-rules ()
    ((_ name (body ...) args (checks ...))
     (lambda args
       checks ...
       body ...))
    ((_ name body (args ...) (checks ...) (arg pred) . rest)
     (%lambda-checked
      name body
      (args ... arg) (checks ... (check-arg pred arg 'name)) . rest))
    ((_ name body (args ...) (checks ...) arg . rest)
     (%lambda-checked
      name body
      (args ... arg) (checks ...) . rest))
    ((_ name body (args ...) (checks ...) . last)
     (%lambda-checked
      name body
      (args ... . last) (checks ...)))))

(define-syntax lambda-checked
  (syntax-rules ()
    ((_ () body ...)
     (lambda () body ...))
    ((_ (arg . args) body ...)
     (%lambda-checked lambda-checked (body ...) () () arg . args))
    ;; Case of arg->list lambda, no-op.
    ((_ arg body ...)
     (lambda arg body ...))))

;; ----------------------------------------------------------------------
(define-syntax %case-lambda-checked
  (syntax-rules ()
    ((_ (clauses-so-far ...)
        ()
        args-so-far (checks-so-far ...) (body ...))
     (case-lambda
       clauses-so-far ...
       (args-so-far
        checks-so-far ...
        body ...)))
    ((_ (clauses-so-far ...)
        ((() body-to-process ...) clauses-to-process ...)
        args-so-far (checks-so-far ...) (body ...))
     (%case-lambda-checked
      (clauses-so-far ... (args-so-far checks-so-far ... body ...))
      (clauses-to-process ...)
      () () (body-to-process ...)))
    ((_ (clauses-so-far ...)
        (((arg . args-to-process) body-to-process ...) clauses-to-process ...)
        args-so-far (checks-so-far ...) (body ...))
     (%case-lambda-checked
      (clauses-so-far ... (args-so-far checks-so-far ... body ...))
      (clauses-to-process ...)
      () () (body-to-process ...) arg . args-to-process))
    ((_ (clauses-so-far ...)
        ((arg-to-process body-to-process ...) clauses-to-process ...)
        args-so-far (checks-so-far ...) (body ...))
     (%case-lambda-checked
      (clauses-so-far ... (args-so-far checks-so-far ... body ...))
      (clauses-to-process ...)
      arg-to-process () (body-to-process ...)))
    ((_ (clauses-so-far ...) (clauses-to-process ...)
        (args-so-far ...) (checks-so-far ...) (body ...) (arg pred) . args)
     (%case-lambda-checked
      (clauses-so-far ...) (clauses-to-process ...)
      (args-so-far ... arg)
      (checks-so-far ... (check-arg pred arg 'case-lambda-checked))
      (body ...) . args))
    ((_ (clauses-so-far ...) (clauses-to-process ...)
        (args-so-far ...) (checks-so-far ...) (body ...) arg . args)
     (%case-lambda-checked
      (clauses-so-far ...) (clauses-to-process ...)
      (args-so-far ... arg) (checks-so-far ...) (body ...) . args))
    ((_ (clauses-so-far ...) (clauses-to-process ...)
        (args-so-far ...) (checks-so-far ...) (body ...) . arg)
     (%case-lambda-checked
      (clauses-so-far ...) (clauses-to-process ...)
      (args-so-far ... . arg) (checks-so-far ...) (body ...)))))

(define-syntax case-lambda-checked
  (syntax-rules ()
    ((_ (() first-body ...) rest-clauses ...)
     (%case-lambda-checked () (rest-clauses ...) () () (first-body ...)))
    ((_ ((first-arg . first-args) first-body ...) rest-clauses ...)
     (%case-lambda-checked () (rest-clauses ...) () () (first-body ...)
                           first-arg . first-args))
    ((_ (args-var first-body ...) rest-clauses ...)
     (%case-lambda-checked () (rest-clauses ...) args-var () (first-body ...)))))

;; ----------------------------------------------------------------------
(define-syntax define-checked
  (syntax-rules ()
    ;; Procedure
    ((_ (name . args) body ...)
     (define name (%lambda-checked name (body ...) () () . args)))
    ;; Variable
    ((_ name pred value)
     (define name (values-checked (pred) value)))))

;; ----------------------------------------------------------------------
(define-syntax %define-record-type-checked
  (syntax-rules ()
    ((_ type-name constructor predicate
        (fields ...) (field-wrappers ...))
     (begin
       (define-record-type
           type-name constructor predicate
           fields ...)
       field-wrappers ...))
    ((_ type-name constructor predicate
        (fields ...) (field-wrappers ...) (field pred accessor modifier)
        fields-to-process ...)
     (%define-record-type-checked
      type-name constructor predicate
      (fields ... (field internal-accessor internal-modifier))
      (field-wrappers
       ...
       (define-checked (accessor (record predicate))
         (internal-accessor record))
       (define-checked (modifier (record predicate) (val pred))
         (internal-modifier record val)))
      fields-to-process ...))
    ((_ type-name constructor predicate
        (fields ...) (field-wrappers ...) (field pred accessor)
        fields-to-process ...)
     (%define-record-type-checked
      type-name constructor predicate
      (fields ... (field internal-accessor))
      (field-wrappers
       ...
       (define-checked (accessor (record predicate))
         (internal-accessor record)))
      fields-to-process ...))))

(define-syntax %wrap-constructor
  (syntax-rules ()
    ((_ constructor internal-constructor (arg-names ...) (args ...))
     (define-checked (constructor args ...)
       (internal-constructor arg-names ...)))
    ((_ constructor internal-constructor (arg-names ...) (args ...)
        (name pred rest ...) fields-to-process ...)
     (%wrap-constructor constructor internal-constructor
                        (arg-names ... name) (args ... (name pred))
                        fields-to-process ...))))

(define-syntax define-record-type-checked
  (syntax-rules ()
    ((_ type-name (constructor constructor-args ...) predicate field ...)
     (begin
       (%define-record-type-checked
        type-name
        (internal-constructor constructor-args ...)
        predicate
        () () field ...)
       (%wrap-constructor constructor internal-constructor () () field ...)))))

) ;; End of define-module


(provide "srfi/253")
