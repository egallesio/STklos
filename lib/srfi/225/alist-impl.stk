;;;;
;;;; 225/alist-impl.stk   -- SRFI-225: Dictionaries - alist implementation
;;;;
;;;; Copyright © 2025 Jeronimo Pellegrini <j_p@aleph0.info>
;;;;
;;;;
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;;;; USA.
;;;;
;;;; This file is a derivative work from the implementation of this
;;;; SRFI by John Cowan and Arvydas Silanskas, it is copyrighted as:
;;;;

;;;;;; © 2021 John Cowan, Arvydas Silanskas.
;;;;;;
;;;;;; Permission is hereby granted, free of charge, to any person
;;;;;; obtaining a copy of this software and associated documentation
;;;;;; files (the "Software"), to deal in the Software without
;;;;;; restriction, including without limitation the rights to use,
;;;;;; copy, modify, merge, publish, distribute, sublicense, and/or sell
;;;;;; copies of the Software, and to permit persons to whom the
;;;;;; Software is furnished to do so, subject to the following
;;;;;; conditions:
;;;;;;
;;;;;; The above copyright notice and this permission notice (including
;;;;;; the next paragraph) shall be included in all copies or
;;;;;; substantial portions of the Software.
;;;;;;
;;;;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;;;;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
;;;;;; OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;;;;;; NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
;;;;;; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
;;;;;; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;;;;;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
;;;;;; OTHER DEALINGS IN THE SOFTWARE.

;;;;           Author: Jeronimo Pellegrini [j_p@aleph0.info]
;;;;    Creation date: 17-Jun-2022 16:12
;;;;

(define-library
  (srfi 225 alist-impl)
  (import (scheme base)
          (srfi 1)
          (srfi 128)
          (srfi 225 core)
          (srfi 225 default-impl)
          (srfi 225 indexes))
  (export
    make-alist-dto
    eqv-alist-dto
    equal-alist-dto)

  (begin

    (define (alist? dto l)
      (and (list? l)
           (or (null? l)
               (pair? (car l)))))

    (define (alist-pure? dto alist)
      #t)

    (define (alist-map dto proc alist)
      (map
        (lambda (e)
          (define key (car e))
          (define value (cdr e))
          (cons key (proc key value)))
        alist))

    (define (alist-filter dto pred alist)
      (filter
        (lambda (e)
          (pred (car e) (cdr e)))
        alist))

    (define (make-alist-delete key=)
      (lambda (dto key alist)
        (filter
          (lambda (entry)
            (not (key= (car entry) key)))
          alist)))

    (define (make-alist-find-update key=)
      (define alist-delete (make-alist-delete key=))
      (lambda (dto alist key failure success)
        (define (handle-success pair)
          (define old-key (car pair))
          (define old-value (cdr pair))
          (define (update new-key new-value)
            (cond
              ((and (eq? old-key
                         new-key)
                    (eq? old-value
                         new-value))
               alist)
              (else
                (let ((new-list
                        (alist-cons
                          new-key new-value
                          (alist-delete dto old-key alist))))
                  new-list))))
          (define (remove)
            (alist-delete dto old-key alist))
          (success old-key old-value update remove))

        (define (handle-failure)
          (define (insert value)
            (alist-cons key value alist))
          (define (ignore)
            alist)
          (failure insert ignore))
        (cond
          ((assoc key alist key=) => handle-success)
          (else (handle-failure)))))


    (define (alist-size dto alist)
      (length alist))

    (define (alist->alist dto alist)
      alist)

    (define (alist-comparator dto dictionary)
      #f)

    (define (make-alist-dto key=)
      (make-dto
        dictionary?-id alist?
        dict-pure?-id alist-pure?
        dict-map-id alist-map
        dict-filter-id alist-filter
        dict-find-update!-id (make-alist-find-update key=)
        dict-size-id alist-size
        dict->alist-id alist->alist
        dict-comparator-id alist-comparator))

    (define eqv-alist-dto (make-alist-dto eqv?))
    (define equal-alist-dto (make-alist-dto equal?))))
