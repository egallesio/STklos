;;;;
;;;; env.stk				-- R5RS environments
;;;;
;;;; Copyright Â© 2006-2022 Erick Gallesio - I3S-CNRS/ESSI <eg@essi.fr>
;;;;
;;;;
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;;;; USA.
;;;;
;;;;           Author: Erick Gallesio [eg@essi.fr]
;;;;    Creation date: 29-Nov-2006 22:33 (eg)
;;;; Last file update:  5-May-2022 19:04 (eg)
;;;;


;;=============================================================================
;; 	interaction-environment ...
;;=============================================================================
#|
<doc interaction-environment
 * (interaction-environment)
 *
 * This procedure returns the environment in the expression are
 * evaluated by default (the {{stklos}} module).
doc>
|#
(define (interaction-environment)
  (find-module 'STklos))


;;=============================================================================
;; 	null-environment ...
;;=============================================================================
(define-module NULL-MODULE)		;; The module for null-environment

; Patch the import-list to nil => This module will not implicitly
; import STklos
(%module-imports-set! (find-module 'NULL-MODULE) '())

#|
<doc null-environment
 * (null-environment)
 * (null-environment version)
 *
 * Returns a specifier for an environment that is empty except for
 * the (syntactic) bindings for all syntactic keywords defined in
 * the R5RS report.
 * 
 * NOTE: In STklos, |null-environment| function can be called
 * without the version number (defaults to 5).
doc>
|#
(define (null-environment :optional (version 5))
  (unless (eq? version 5)
    (error "this version is not supported ~S" version))
  (find-module 'NULL-MODULE))

;;=============================================================================
;; 	scheme-report-environment ...
;;=============================================================================
(define-module R5RS
  (import SCHEME)

  (define * *)
  (define + +)
  (define - -)
  (define / /)
  (define < <)
  (define <= <=)
  (define = =)
  (define > >)
  (define >= >=)
  (define abs abs)
  (define acos acos)
  (define append append)
  (define apply apply)
  (define asin asin)
  (define assoc assoc)
  (define assq assq)
  (define assv assv)
  (define atan atan)
  (define boolean? boolean?)
  (define caar caar)
  (define cadr cadr)
  (define call-with-current-continuation call-with-current-continuation)
  (define call-with-input-file call-with-input-file)
  (define call-with-output-file call-with-output-file)
  (define call-with-values call-with-values)
  (define call/cc call/cc)
  (define car car)
  (define cdr cdr)
  (define caar caar)
  (define cadr cadr)
  (define cdar cdar)
  (define cddr cddr)
  (define caaar caaar)
  (define caadr caadr)
  (define cadar cadar)
  (define caddr caddr)
  (define cdaar cdaar)
  (define cdadr cdadr)
  (define cddar cddar)
  (define cdddr cdddr)
  (define caaaar caaaar)
  (define caaadr caaadr)
  (define caadar caadar)
  (define caaddr caaddr)
  (define cadaar cadaar)
  (define cadadr cadadr)
  (define caddar caddar)
  (define cadddr cadddr)
  (define cdaaar cdaaar)
  (define cdaadr cdaadr)
  (define cdadar cdadar)
  (define cdaddr cdaddr)
  (define cddaar cddaar)
  (define cddadr cddadr)
  (define cdddar cdddar)
  (define cddddr cddddr)
  (define ceiling ceiling)
  (define char->integer char->integer)
  (define char-alphabetic? char-alphabetic?)
  (define char-ci<=? char-ci<=?)
  (define char-ci<? char-ci<?)
  (define char-ci=? char-ci=?)
  (define char-ci>=? char-ci>=?)
  (define char-ci>? char-ci>?)
  (define char-downcase char-downcase)
  (define char-lower-case? char-lower-case?)
  (define char-numeric? char-numeric?)
  (define char-ready? char-ready?)
  (define char-upcase char-upcase)
  (define char-upper-case? char-upper-case?)
  (define char-whitespace? char-whitespace?)
  (define char<=? char<=?)
  (define char<? char<?)
  (define char=? char=?)
  (define char>=? char>=?)
  (define char>? char>?)
  (define char? char?)
  (define close-input-port close-input-port)
  (define close-output-port close-output-port)
  (define complex? complex?)
  (define cons cons)
  (define cos cos)
  (define current-input-port current-input-port)
  (define current-output-port current-output-port)
  (define denominator denominator)
  (define display display)
  (define dynamic-wind dynamic-wind)
  (define eof-object? eof-object?)
  (define eq? eq?)
  (define equal? equal?)
  (define eqv? eqv?)
  (define error error)
  (define even? even?)
  (define exact->inexact exact->inexact)
  (define exact? exact?)
  (define exp exp)
  (define expt expt)
  (define floor floor)
  (define for-each for-each)
  (define force force)
  (define gcd gcd)
  (define imag-part imag-part)
  (define inexact->exact inexact->exact)
  (define inexact? inexact?)
  (define input-port? input-port?)
  (define integer->char integer->char)
  (define integer? integer?)
  (define lcm lcm)
  (define length length)
  (define list list)
  (define list->string list->string)
  (define list->vector list->vector)
  (define list-ref list-ref)
  (define list-tail list-tail)
  (define list? list?)
  (define load load)
  (define log log)
  (define magnitude magnitude)
  (define make-polar make-polar)
  (define make-rectangular make-rectangular)
  (define make-string make-string)
  (define make-vector make-vector)
  (define map map)
  (define max max)
  (define member member)
  (define memq memq)
  (define memv memv)
  (define min min)
  (define modulo modulo)
  (define negative? negative?)
  (define newline newline)
  (define not not)
  (define null? null?)
  (define number->string number->string)
  (define number? number?)
  (define numerator numerator)
  (define odd? odd?)
  (define open-input-file open-input-file)
  (define open-output-file open-output-file)
  (define output-port? output-port?)
  (define pair? pair?)
  (define peek-char peek-char)
  (define positive? positive?)
  (define procedure? procedure?)
  (define quotient quotient)
  (define rational? rational?)
  (define rationalize rationalize)
  (define read read)
  (define read-char read-char)
  (define real-part real-part)
  (define real? real?)
  (define remainder remainder)
  (define reverse reverse)
  (define round round)
  (define set-car! set-car!)
  (define set-cdr! set-cdr!)
  (define sin sin)
  (define sqrt sqrt)
  (define string string)
  (define string->list string->list)
  (define string->number string->number)
  (define string->symbol string->symbol)
  (define string-append string-append)
  (define string-ci<=? string-ci<=?)
  (define string-ci<? string-ci<?)
  (define string-ci=? string-ci=?)
  (define string-ci>=? string-ci>=?)
  (define string-ci>? string-ci>?)
  (define string-copy string-copy)
  (define string-fill! string-fill!)
  (define string-length string-length)
  (define string-ref string-ref)
  (define string-set! string-set!)
  (define string<=? string<=?)
  (define string<? string<?)
  (define string=? string=?)
  (define string>=? string>=?)
  (define string>? string>?)
  (define string? string?)
  (define substring substring)
  (define symbol->string symbol->string)
  (define symbol? symbol?)
  (define tan tan)
  (define truncate truncate)
  (define values values)
  (define vector vector)
  (define vector->list vector->list)
  (define vector-fill! vector-fill!)
  (define vector-length vector-length)
  (define vector-ref vector-ref)
  (define vector-set! vector-set!)
  (define vector? vector?)
  (define with-input-from-file with-input-from-file)
  (define with-output-to-file with-output-to-file)
  (define write write)
  (define write-char write-char)
  (define zero? zero?)

  (export * + - / < <= = > >= abs acos append apply asin assoc
	  assq assv atan boolean? caar cadr call-with-current-continuation
	  call-with-input-file call-with-output-file call-with-values
	  call/cc car cdr caar cadr cdar cddr caaar caadr cadar caddr cdaar
	  cdadr cddar cdddr caaaar caaadr caadar caaddr cadaar cadadr
	  caddar cadddr cdaaar cdaadr cdadar cdaddr cddaar cddadr cdddar
	  cddddr ceiling char->integer char-alphabetic? char-ci<=?
	  char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase
	  char-lower-case? char-numeric? char-ready? char-upcase
	  char-upper-case? char-whitespace? char<=? char<? char=? char>=?
	  char>? char? close-input-port close-output-port complex? cons cos
	  current-input-port current-output-port denominator display
	  dynamic-wind eof-object? eq? equal? eqv? error even?
	  exact->inexact exact? exp expt floor for-each force gcd imag-part
	  inexact->exact inexact? input-port? integer->char integer? lcm
	  length list list->string list->vector list-ref list-tail list?
	  load log magnitude make-polar make-rectangular make-string
	  make-vector map max member memq memv min modulo negative? newline
	  not null? number->string number? numerator odd? open-input-file
	  open-output-file output-port? pair? peek-char positive?
	  procedure? quotient rational? rationalize read read-char
	  real-part real? remainder reverse round set-car! set-cdr! sin
	  sqrt string string->list string->number string->symbol
	  string-append string-ci<=? string-ci<? string-ci=? string-ci>=?
	  string-ci>? string-copy string-fill! string-length string-ref
	  string-set! string<=? string<? string=? string>=? string>?
	  string? substring symbol->string symbol? tan truncate values
	  vector vector->list vector-fill! vector-length vector-ref
	  vector-set! vector? with-input-from-file with-output-to-file
	  write write-char zero?))

#|
<doc scheme-report-environment
 * (scheme-report-environment)
 * (scheme-report-environment version)
 *
 * Returns a specifier for an environment that contains the bindings defined
 * in the R5RS report.
 * 
 * NOTE: In STklos, |scheme-report-environment| function can be called
 * without the version number (defaults to 5).
doc>
|#
(define (scheme-report-environment :optional (version 5))
  (unless (eq? version 5)
    (error "this version is not supported ~S" version))
  (find-module 'R5RS))



          
#|
<doc environment
 * (environment [name] lib1 lib2 ...)
 *
 * This procedure returns a specifier for the environment that
 * results by starting with an empty environment and then
 * importing each lib (list or symbol), considered as an import
 * set, into it. The bindings of the environment represented by
 * the specifier, as is the environment itself.
 *
 * In STklos,
 * - each |lib| argument can be a list (specifying an R7RS
 *   library) or a symbol (specifying a module).
 * - the return environment is an R7RS library (which can be
 *   passed to |eval|).
 * - if |name| is a string, it will be set as the new environment
 *   (library) name.
doc>
|#
(define (environment . args)

  (define (check-module-names args)
    (for-each (lambda (arg)
                (unless (or (symbol? arg) (list? arg))
                  (error "bad library or module name ~S" arg)))
              args))

  ;; Given a list of library or module names, return a list of
  ;; modules.
  (define (get-modules-from-names args)
    (map (lambda (arg)
           (let ((m (find-module arg #f)))
             (if m m (error "bad library or module ~S" arg))))
         (map %library-name->symbol args)))

  ;; The user can include a name as first argument
  (let ((name (if (and (pair? args) (string? (car args)))
                  (string->symbol (car args))
                  #f)))
    (when name (set! args (cdr args)))

    ;; Null environment?
    (if (null? args)
        (find-module 'NULL-MODULE)
        
        (begin
          (check-module-names args)
          
          (let ((new-imported-modules (get-modules-from-names args)))
            
            ;; We create an R7RS library. Not a STklos module, since it would
            ;; then import more than we'd like.
            (let ((new (%make-library)))
              (let ((new-exported-symbols
                     
                     (let loop ((exp-list '())
                                (new-imported-modules new-imported-modules))
                       
                       (let* ((mod (car new-imported-modules))
                              (mod-exported (map car (module-exports mod))))
                           
                         ;; Append here is not efficient, but... How many
                         ;; modules and exported symbols will one include here?
                         (let ((new-exported
                                (append mod-exported exp-list)))
                           
                           ;; define the symbol in the module
                           (for-each (lambda (sym)
                                       (%symbol-define sym (symbol-value sym mod) new))
                                     mod-exported)
                             (if (null? (cdr new-imported-modules))
                                 new-exported
                                 (loop new-exported
                                       (cdr new-imported-modules))))))))
                
                ;; The module is populated! We can now set its exported
                ;; symbols and imported modules. (Setting the imported modules
                ;; is relevant, because the standard says it should behave
                ;; "starting with an empty environment and then importing each
                ;; list, considered as an import set, into it" -- which would
                ;; set the import list of the module.
                (%module-exports-set! new new-exported-symbols)
                (%module-imports-set! new new-imported-modules)
                
                (module-lock! new)  ;; immutability required by the standard
                
                ;; If the user passed a string as first argument,
                ;; we use it as name. Otherwise, we can't give it
                ;; a name.
                ;; In the spec, the procedure does not take names as
                ;; arguments, and we can't decide which one to give.
                ;; Gensym doesn't help, because we'd create a name
                ;; that the user can't refer to later.
                (when name (%register-library-as-module new name))
                
                new)))))))
    


(provide "env")
