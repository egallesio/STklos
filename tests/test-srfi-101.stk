;; Copyright (c) David Van Horn 2009.  All Rights Reserved.

;; Permission is hereby granted, free of charge, to any person obtaining
;; a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without restriction,
;; including without limitation the rights to use, copy, modify, merge,
;; publish, distribute, sublicense, and/or sell copies of the Software,
;; and to permit persons to whom the Software is furnished to do so,
;; subject to the following conditions:

;; The above copyright notice and this permission notice shall be
;; included in all copies or substantial portions of the Software.

;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;; NONINFRINGEMENT. REMEMBER, THERE IS NO SCHEME UNDERGROUND. IN NO EVENT
;; SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
;; DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
;; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
;; THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  ;; (import (except SCHEME
  ;;                 ;;quote
  ;;                 pair? cons car cdr
  ;;                 caar cadr cddr cdar
  ;;                 caaar caadr caddr cadar
  ;;                 cdaar cdadr cdddr cddar
  ;;                 caaaar caaadr caaddr caadar
  ;;                 cadaar cadadr cadddr caddar
  ;;                 cdaaar cdaadr cdaddr cdadar
  ;;                 cddaar cddadr cddddr cdddar
  ;;                 null? list? list length
  ;;                 append reverse list-tail
  ;;                 list-ref map for-each)
  ;;         )

(test-section "SRFI-101")


(define-syntax check-expect
  (syntax-rules ()
    ((_ m c e) (test m e c))))

(define scheme (find-module 'SCHEME))
(define scheme:null? (symbol-value 'null? scheme))
(define scheme:list  (symbol-value 'list  scheme))

(import (prefix srfi/101 s_))



; quote


(check-expect "srfi-101.-1" (s_quote 5) (quote 5))
(check-expect "srfi-101.0"  (s_quote x) (quote x))

(check-expect "srfi-101.1"
              (let ((f (lambda () (s_quote (x)))))
                (eq? (f) (f)))
              #t)

(check-expect "srfi-101.2"
              (s_quote (1 2 3))
              (s_list 1 2 3))

; pair?
(check-expect "srfi-101.3" (s_pair? (s_cons 'a 'b)) #t)
(check-expect "srfi-101.4" (s_pair? (s_list 'a 'b 'c)) #t)
(check-expect "srfi-101.5" (s_pair? '()) #f)
(check-expect "srfi-101.6" (s_pair? '#(a b)) #f)

; cons
(check-expect "srfi-101.7" (s_cons 'a '()) (s_list 'a))
(check-expect "srfi-101.8"
              (equal? (s_cons (s_list 'a) (s_list 'b 'c 'd))
                      (s_list (s_list 'a) 'b 'c 'd))
              #t)
(check-expect "srfi-101.9"
              (s_cons "a" (s_list 'b 'c))
              (s_list "a" 'b 'c))
(check-expect "srfi-101.10" (s_cons 'a 3)
              (s_cons 'a 3))
(check-expect "srfi-101.11"
              (s_cons (s_list 'a 'b) 'c)
              (s_cons (s_list 'a 'b) 'c))

; car
(check-expect "srfi-101.12" (s_car (s_list 'a 'b 'c))
              'a)
(check-expect "srfi-101.13" (s_car (s_list (s_list 'a) 'b 'c 'd))
              (s_list 'a))
(check-expect "srfi-101.14" (s_car (s_cons 1 2)) 1)
(test/error "srfi-101.14.5" (s_car '()))

; cdr
(check-expect "srfi-101.15"
              (s_cdr (s_list (s_list 'a) 'b 'c 'd))
              (s_list 'b 'c 'd))
(check-expect "srfi-101.16"
              (s_cdr (s_cons 1 2))
              2)
(test/error "srfi-101.16.5" (s_cdr '()))

; null?
(check-expect "srfi-101.17" (eq? s_null? scheme:null?) #t)
(check-expect "srfi-101.18" (s_null? '()) #t)
(check-expect "srfi-101.19" (s_null? (s_cons 1 2)) #f)
(check-expect "srfi-101.20" (s_null? 4) #f)

; list?
(check-expect "srfi-101.21" (s_list? (s_list 'a 'b 'c)) #t)
(check-expect "srfi-101.22" (s_list? '()) #t)
(check-expect "srfi-101.23" (s_list? (s_cons 'a 'b)) #f)

; list
(check-expect "srfi-101.24" (s_list 'a (+ 3 4) 'c)
              (s_list 'a 7 'c))
(check-expect "srfi-101.25" (s_list) '())

; make-list
(check-expect "srfi-101.26" (s_length (s_make-list 5)) 5)
(check-expect "srfi-101.27" (s_make-list 5 0)
              (s_list 0 0 0 0 0))

; length
(check-expect "srfi-101.28" (s_length (s_list 'a 'b 'c)) 3)
(check-expect "srfi-101.29" (s_length (s_list 'a (s_list 'b) (s_list 'c))) 3)
(check-expect "srfi-101.30" (s_length '()) 0)

; append
(check-expect "srfi-101.31" (s_append (s_list 'x) (s_list 'y)) (s_list 'x 'y))
(check-expect "srfi-101.32" (s_append (s_list 'a) (s_list 'b 'c 'd)) (s_list 'a 'b 'c 'd))
(check-expect "srfi-101.33" (s_append (s_list 'a (s_list 'b)) (s_list (s_list 'c)))
              (s_list 'a (s_list 'b) (s_list 'c)))
(check-expect "srfi-101.34" (s_append (s_list 'a 'b) (s_cons 'c 'd))
              (s_cons 'a (s_cons 'b (s_cons 'c 'd))))
(check-expect "srfi-101.35" (s_append '() 'a) 'a)

; reverse
(check-expect "srfi-101.36" (s_reverse (s_list 'a 'b 'c))
              (s_list 'c 'b 'a))
(check-expect "srfi-101.37" (s_reverse (s_list 'a (s_list 'b 'c) 'd (s_list 'e (s_list 'f))))
              (s_list (s_list 'e (s_list 'f)) 'd (s_list 'b 'c) 'a))

; list-tail
(check-expect "srfi-101.38" (s_list-tail (s_list 'a 'b 'c 'd) 2)
              (s_list 'c 'd))

; list-ref
(check-expect "srfi-101.39" (s_list-ref (s_list 'a 'b 'c 'd) 2) 'c)

; list-set
(check-expect "srfi-101.40" (s_list-set (s_list 'a 'b 'c 'd) 2 'x)
              (s_list 'a 'b 'x 'd))

; list-ref/update
(let-values (((a b)
              (s_list-ref/update (s_list 7 8 9 10) 2 -)))
  (check-expect "srfi-101.41" a 9)
  (check-expect "srfi-101.42" b (s_list 7 8 -9 10)))

; map
(check-expect "srfi-101.43"
              (s_map s_cadr (s_list (s_list 'a 'b) (s_list 'd 'e) (s_list 'g 'h)))
              (s_list 'b 'e 'h))
(check-expect "srfi-101.44"
              (s_map (lambda (n) (expt n n))
                     (s_list 1 2 3 4 5))
              (s_list 1 4 27 256 3125))
(check-expect "srfi-101.45"
              (s_map + (s_list 1 2 3) (s_list 4 5 6))
              (s_list 5 7 9))

; for-each
(check-expect "srfi-101.46" (let ((v (make-vector 5)))
                (s_for-each (lambda (i)
                            (vector-set! v i (* i i)))
                          (s_list 0 1 2 3 4))
                v)
              '#(0 1 4 9 16))

; random-access-list->linear-access-list
; linear-access-list->random-access-list
(check-expect "srfi-101.47" (s_random-access-list->linear-access-list '()) '())
(check-expect "srfi-101.48" (s_linear-access-list->random-access-list '()) '())

(check-expect "srfi-101.49" (s_random-access-list->linear-access-list (s_list 1 2 3))
              (scheme:list 1 2 3))

(check-expect "srfi-101.50" (s_linear-access-list->random-access-list (scheme:list 1 2 3))
              (s_list 1 2 3))

;;------------------------------------------------------------------
(test-section-end)
