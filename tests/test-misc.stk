;;;;
;;;;
;;;; test-misc.stk         -- Some tests which don't feat anywhere else
;;;;
;;;; Copyright Â© 2020 Erick Gallesio - I3S-CNRS/Polytech Nice-Sophia <eg@unice.fr>
;;;;
;;;;
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;;;; USA.
;;;;
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date:  5-Jul-2020 19:23
;;;; Last file update:  8-Oct-2020 16:52 (eg)
;;;;

(require "test")

(test-section "Miscellaneous tests")

;;------------------------------------------------------------------
(test-subsection "Symbols")

(test "symbol.1" '|a\x33;b| 'a3b)
(test "symbol.2" '|a\|b| 'a\|b)
(test "symbol.3" '|a\\b| 'a\\b)
(test "symbol.4" '|a\nb| '|a
b|)
(test "symbols.5" '|a\x8;b| (string->symbol "a\010b"))
(test "print-symbol.1" "a\nb"  (with-output-to-string (lambda() (display 'a\nb))))
(test "print-symbol.2" "|a\\nb|" (with-output-to-string (lambda() (write 'a\nb))))
(test "bars anywhere"  '|a   b| 'a|   |b)
(test "useless backslash.1" 'abcd '|ab\cd|)
(test "useless backslash.2" 'abc '|ab\c|)
(test "useless backslash.3" 'abc 'ab\c)
(test "special-name.1"       '|\b| '\b)
(test "special-name.2"       '|| (string->symbol ""))

;;----------------------------------------------------------------------
(test-subsection "Paths")
(test "file-suffix.1" "gz" (file-suffix "./foo.tar.gz"))
(test "file-suffix.2" #f  (file-suffix "./a.b/c"))
(test "file-suffix.3" ""  (file-suffix "./a.b/c."))
(test "(file-suffix.4" #f  (file-suffix "~/.profile"))

;;----------------------------------------------------------------------
(test-subsection "Sharp syntax")

(test "#t #T"
      #t
      (eq? #t #T))

(test "#t #true"
      #t
      (eq? #t #true))

(test "#f #F"
      #t
      (eq? #f #F))

(test "f #false"
      #t
      (eq? #f #false))

(test "#eof"
      #t
      (eof-object? #eof))

(test "#void"
      #t
      (eq? #void (if #f 'WRONG)))

;;----------------------------------------------------------------------
(test-subsection "bonus.stk")

;; the following two errors do occur in some Scheme implementations.
(test "every"
      1
      (every (lambda (x y)
               (if (and (even? x) (even? y)) 1 -1))
             '(2 4 5) '(12 14)))

(test "any"
      -1
      (any (lambda (x y)
             (if (or (even? x) (even? y)) 1 -1))
           '(1 3 4) '(11 13)))


;;----------------------------------------------------------------------
(test-subsection "Docstrings and signatures")

(import STKLOS-COMPILER)
(compiler:generate-signature #t)

(define (d) 1)
(define (e x) 10)
(define (f a b) "docstring abc" 42)
(define g f)
(define h (lambda (x y) "h doc" 10))
(define i #f)
(set! i (lambda (w z) 0))

(test "empty signature"
      '()
      (%procedure-signature d))
(test "no-docstring"
      #f
      (%procedure-doc e))
(test "no-docstring, but signature"
      '(x)
      (%procedure-signature e))
(test "docstring"
      "docstring abc"
      (%procedure-doc f))
(test "docstring g"
      "docstring abc"
      (%procedure-doc g))
(test "signature"
      '(a b)
      (%procedure-signature f))
(test "signature g"
      '(a b)
      (%procedure-signature g))
(test "docstring h"
      "h doc"
      (%procedure-doc h))
(test "signature h"
      '(x y)
      (%procedure-signature h))
(test "signature i"
      '(w z)
      (%procedure-signature i))
(test "really anonymous lambda - sig"
      '(l i s p)
      (%procedure-signature (lambda (l i s p) (+ l i s p))))
(test "really anonymous lambda sig, with docstring"
      '(l i s p)
      (%procedure-signature (lambda (l i s p) "Hello!" (+ l i s p))))
(test "really anonymous lambda - docstring"
      "Hello!"
      (%procedure-doc (lambda (l i s p) "Hello!" (+ l i s p))))

(compiler:generate-signature #f)

(define (dd) 1)
(define (ee x) 10)
(define (ff a b) "docstring abcd" 42)
(define gg ff)
(define hh (lambda (x y) "hh doc" 10))
(define ii #f)
(set! ii (lambda (w z) 0))

(test "empty signature, not generated"
      #f
      (%procedure-signature dd))
(test "no-docstring"
      #f
      (%procedure-doc ee))
(test "no-docstring, but sig, not generated"
      #f
      (%procedure-signature ee))
(test "docstring"
      "docstring abcd"
      (%procedure-doc ff))
(test "docstring g"
      "docstring abcd"
      (%procedure-doc gg))
(test "signature"
      #f
      (%procedure-signature ff))
(test "signature gg"
      #f
      (%procedure-signature gg))
(test "docstring hh"
      "hh doc"
      (%procedure-doc hh))
(test "signature hh"
      #f
      (%procedure-signature hh))
(test "signature ii"
      #f
      (%procedure-signature ii))
(test "really anonymous lambda - sig (not generated)"
      #f
      (%procedure-signature (lambda (l i s p) (+ l i s p))))
(test "really anonymous lambda sig - sig not generated, with docstring"
      #f
      (%procedure-signature (lambda (l i s p) "Hello!" (+ l i s p))))
(test "really anonymous lambda doc - sig not generated, with docstring"
      "Hello!"
      (%procedure-doc (lambda (l i s p) "Hello!" (+ l i s p))))


;;------------------------------------------------------------------
(test-section-end)
