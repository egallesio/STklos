;;;;
;;;;
;;;; test-misc.stk         -- Some tests which don't feat anywhere else
;;;;
;;;; Copyright Â© 2020-2023 Erick Gallesio <eg@stklos.net>
;;;;
;;;;
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;;;; USA.
;;;;
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date:  5-Jul-2020 19:23
;;;; Last file update: 10-Feb-2023 17:46 (eg)
;;;;

(require "test")

(test-section "Miscellaneous tests")

;;------------------------------------------------------------------
(test-subsection "Symbols")

(test "symbol.1" '|a\x33;b| 'a3b)
(test "symbol.2" '|a\|b| 'a\|b)
(test "symbol.3" '|a\\b| 'a\\b)
(test "symbol.4" '|a\nb| '|a
b|)
(test "symbols.5" '|a\x8;b| (string->symbol "a\010b"))
(test "print-symbol.1" "a\nb"  (with-output-to-string (lambda() (display 'a\nb))))
(test "print-symbol.2" "|a\\nb|" (with-output-to-string (lambda() (write 'a\nb))))
(test "bars anywhere"  '|a   b| 'a|   |b)
(test "useless backslash.1" 'abcd '|ab\cd|)
(test "useless backslash.2" 'abc '|ab\c|)
(test "useless backslash.3" 'abc 'ab\c)
(test "special-name.1"       '|\b| '\b)
(test "special-name.2"       '|| (string->symbol ""))

(test "symbol with an hexa sequence" '|A B| (read-from-string "A\\x20;B"))
(test/error "non finished hex sequence.1" (read-from-string "a\\x123Z"))
(test/error "non finished hex sequence.2" (read-from-string "a\\x123"))
(test/error "too long hex sequence" (read-form-string "\\x111111111111111111111111"))


;;----------------------------------------------------------------------
(test-subsection "Paths")
(test "file-suffix.1" "gz" (file-suffix "./foo.tar.gz"))
(test "file-suffix.2" #f  (file-suffix "./a.b/c"))
(test "file-suffix.3" ""  (file-suffix "./a.b/c."))
(test "(file-suffix.4" #f  (file-suffix "~/.profile"))

;;----------------------------------------------------------------------
(test-subsection "Sharp syntax")

(test "#t #T"
      #t
      (eq? #t #T))

(test "#t #true"
      #t
      (eq? #t #true))

(test "#f #F"
      #t
      (eq? #f #F))

(test "f #false"
      #t
      (eq? #f #false))

(test "#eof"
      #t
      (eof-object? #eof))

(test "#void"
      #t
      (eq? #void (if #f 'WRONG)))

;;----------------------------------------------------------------------
(test-subsection "bonus.stk")

(let ((fct  (lambda (x y) (and (even? x) (even? y) (+ x y)))))
  (test "every.1"
        1
        (every (lambda (x y) (if (and (even? x) (even? y)) 1 -1))
               '(2 4 5) '(12 14)))

  (test "every.2" #t (every fct '() '()))
  (test "every.3" #f (every fct '(2 1) '(4 6)))
  (test "every.4" 12 (every fct '(2 4) '(6 8)))
  (test "every.5" 12 (every fct '(2 4 1) '(6 8)))

  (test "any.1"
        -1
        (any (lambda (x y)
               (if (or (even? x) (even? y)) 1 -1))
             '(1 3 4) '(11 13)))

  (test "any.2" #f (any fct '() '()))
  (test "any.3" #f (any fct '(2 4 6) '(1 3 5)))
  (test "any.4" 6  (any fct '(2 4 6) '(1 2 5)))
  (test "any.5" 2  (any fct '(2 4 6 8 10) '(-1 -3 -4))))

(test "void? #void" #t (void? #void))
(test "void? (void)"     #t (void? (void)))
(test "void? (if #f #t)" #t (void? (if #f #t)))
(test "void? set!"       #t (let ((a 0)) (void? (set! a 1))))
(test "void number"      #f (void? -2))
(test "void string"      #f (void? "str"))
(test "void nil"         #f (void? '()))
(test "void closure"     #f (void? (lambda () -1)))
(define-macro %%tmp (lambda lst 'ok))
(test "void syntax"      #f (void? %%tmp))

;;----------------------------------------------------------------------
(test-subsection "Escaped octals in strings")

;; similar tests are in test-r7rs, but since R7RS does not mention escaped octals,
;; we keep these here:
(test "read escaped octal"       "C"   (guard (e (else 'wrong)) (read-from-string "\"\\0103\"")))
(test "read only 3 octal digits" "S45" (guard (e (else 'wrong)) (read-from-string "\"\\012345\"")))

;;----------------------------------------------------------------------
(test-subsection "Arity, docstrings, signatures and sources")

(let ((f (lambda () (void)))
      (g (lambda (a) (void)))
      (h (lambda (a b c d) (void)))
      (i (lambda args (void)))
      (j (lambda (a b c . rest) void))
      (k (lambda (a b :optional c d) (void)))
      (l (lambda (a b :key e f) (void)))
      (m (lambda (a b :optional c d :rest r :key e f) (void))))
  (test "arity zero"  0 (%procedure-arity f))
  (test "arity one"   1 (%procedure-arity g))
  (test "arity four"  4 (%procedure-arity h))
  (test "arity args" -1 (%procedure-arity i))
  (test "arity rest" -4 (%procedure-arity j))
  (test "arity opke" -3 (%procedure-arity k))
  (test "arity opke" -3 (%procedure-arity l))
  (test "arity opke" -3 (%procedure-arity m)))

(test "arity nil"  #f (%procedure-arity '()))
(test "arity 5"    #f (%procedure-arity 5))
(test "arity code" #f (%procedure-arity '(lambda () -1)))

(compiler:generate-signature #t)

(define (d) 1)
(define (e x) 10)
(define (f a b) "docstring abc" 42)
(define g f)
(define h (lambda (x y) "h doc" 10))
(define i #f)
(set! i (lambda (w z) 0))

(test "empty signature"
      '()
      (%procedure-signature d))
(test "no-docstring"
      #f
      (%procedure-doc e))
(test "no-docstring, but signature"
      '(x)
      (%procedure-signature e))
(test "docstring"
      "docstring abc"
      (%procedure-doc f))
(test "docstring g"
      "docstring abc"
      (%procedure-doc g))
(test "signature"
      '(a b)
      (%procedure-signature f))
(test "signature g"
      '(a b)
      (%procedure-signature g))
(test "docstring h"
      "h doc"
      (%procedure-doc h))
(test "signature h"
      '(x y)
      (%procedure-signature h))
(test "signature i"
      '(w z)
      (%procedure-signature i))
(test "really anonymous lambda - sig"
      '(l i s p)
      (%procedure-signature (lambda (l i s p) (+ l i s p))))
(test "really anonymous lambda sig, with docstring"
      '(l i s p)
      (%procedure-signature (lambda (l i s p) "Hello!" (+ l i s p))))
(test "really anonymous lambda - docstring"
      "Hello!"
      (%procedure-doc (lambda (l i s p) "Hello!" (+ l i s p))))

(compiler:generate-signature #f)

(define (dd) 1)
(define (ee x) 10)
(define (ff a b) "docstring abcd" 42)
(define gg ff)
(define hh (lambda (x y) "hh doc" 10))
(define ii #f)
(set! ii (lambda (w z) 0))

(test "empty signature, not generated"
      #f
      (%procedure-signature dd))
(test "no-docstring"
      #f
      (%procedure-doc ee))
(test "no-docstring, but sig, not generated"
      #f
      (%procedure-signature ee))
(test "docstring"
      "docstring abcd"
      (%procedure-doc ff))
(test "docstring g"
      "docstring abcd"
      (%procedure-doc gg))
(test "signature"
      #f
      (%procedure-signature ff))
(test "signature gg"
      #f
      (%procedure-signature gg))
(test "docstring hh"
      "hh doc"
      (%procedure-doc hh))
(test "signature hh"
      #f
      (%procedure-signature hh))
(test "signature ii"
      #f
      (%procedure-signature ii))
(test "really anonymous lambda - sig (not generated)"
      #f
      (%procedure-signature (lambda (l i s p) (+ l i s p))))
(test "really anonymous lambda sig - sig not generated, with docstring"
      #f
      (%procedure-signature (lambda (l i s p) "Hello!" (+ l i s p))))
(test "really anonymous lambda doc - sig not generated, with docstring"
      "Hello!"
      (%procedure-doc (lambda (l i s p) "Hello!" (+ l i s p))))

;; source
(compiler:keep-source #t)

(define (cube x) (* x x x))
(test "source cube"
      '(lambda (x) (* x x x))
      (%procedure-source cube))

(test "source cube different var"
      #f ;; the *exact* source is returned.
      (equal? (%procedure-source cube)
              '(lambda (y) (* y y y))))

(let ((f (lambda (a b c) (list c b a))))
  (test "source f"
        '(lambda (a b c) (list c b a))
        (%procedure-source f)))

(let ((f (lambda args (print args))))
  (test "source lambda args"
        '(lambda args (print args))
        (%procedure-source f)))

;; not testing key and optionals, because the source of the
;; optional/keyword processing is included.
;; (let ((f (lambda (a b :optional c d :rest r :key e f)
;;            (values r (list a b c d e f)))))
;;   ...

(let ((f #f)
      (g #f))
  (let loop ( (a 1)
              (b 2) )
    (set! g (list b a))
    (set! f loop))
  (test "source named let"
        '(lambda (a b) (set! g (list b a)) (set! f loop))
        (%procedure-source f)))

(letrec ((f (lambda (n) (if (positive? n)
                       (* n (f (- n 1)))
                       1))))
  (test "source letrec"
        '(lambda (n) (if (positive? n) (* n (f (- n 1))) 1))
        (%procedure-source f)))

(test "source 1"    #f (%procedure-source 1))
(test "source void" #f (%procedure-source #void))
(test "source nil"  #f (%procedure-source '()))
(test "source code" #f (%procedure-source '(lambda (a) (- a))))


;; Disable and see if it's really off
(compiler:keep-source #f)

(define (cube x) (* x x x))
(test "source cube"
      #f
      (%procedure-source cube))

(test "source cube different var"
      #f
      (equal? (%procedure-source cube)
              '(lambda (y) (* y y y))))

(let ((f (lambda (a b c) (list c b a))))
  (test "source f"
        #f
        (%procedure-source f)))

;;----------------------------------------------------------------------
(test-subsection "tagbody and repeat")

(test "tagbody without goto"
      3
      (tagbody 1 2 3))

(test "tagbody loop"
      "01234"
      (call-with-output-string
       (lambda (p)
         (let ((v 0))           ;; equivalent to (dotimes (v 5) (display v))
           (tagbody
            #:top (when (< v 5)
                    (display v p)
                    (set! v (fx+ v 1))
                    (-> #:top)))))))

(test "convoluted tagbody"
      "1234"
      (call-with-output-string
       (lambda (p)
         (tagbody (display 1 p)
             (tagbody (display 2 p)
                      (-> #:inner)
                      (display "never printed" p)
                      #:inner
                      (display 3 p)
                      (-> #:outer)
                      (display "never printed too"p))
             #:outer
             (display "4" p)))))

(test/error "tagbody absent label"
            (tagbody (-> #:absent)))

(test "repeat.1"
      (make-string 100 #\.)
      (call-with-output-string (lambda (p)
                                 (repeat 100 (display "." p)))))

(test "repeat.2"
      ""
      (call-with-output-string (lambda (p)
                                 (repeat -4 (display "." p)))))
(test/error "repeat.3"
            (repeat 'not-a-number (display "." p)))

;;----------------------------------------------------------------------
(test-subsection "(void)")

(test "void.1" #t (eq? (void) #void))
(test "void.2" #t (eq? (void 1 2 3) #void))
(test "void.3"
      '(-1 20 #void)
      (let ((x 1)
            (y 2))
        (let ((z (void (set! x -1)
                       (set! y (* y 10)))))
          (list x y z))))

;;----------------------------------------------------------------------
(test-subsection "syntax names in environment")

(test "syntax in env.1" '(1 2 3) (lambda (begin) (begin 1 2 3)) (lambda lambda lambda))
(test "syntax in env.2" 3 (lambda (_) (begin 1 2 3)) (lambda lambda lambda))


;;----------------------------------------------------------------------
(test-subsection "match-case & match-lambda")


(test "match-case.1"
      'bar
      (match-case '(a b a)
                  ((?x ?x) 'foo)
                  ((?x ?- ?x) 'bar)))

(test "match-case.2"
      '(length=3 d (b c) a)
      (match-case '(a (b c) d)
                  ((?x ?y) (list 'length=2 y x))
                  ((?x ?y ?z) (list 'length=3 z y x))))

(test "match-case.3"
      'bar
      (match-case '(a b c)
                  ((a (not (kwote b)) c) 'foo)
                  ((a (or (kwote a) (kwote b)) c) 'bar)))

(test "match-lambda.1"
      'bar
      ((match-lambda
         ((?x ?x) 'foo)
         ((?x ?- ?x) 'bar))
       '(a b a)))


(test "match-lambda.2"
      '(length=3 d (b c) a)
      ((match-lambda
         ((?x ?y) (list 'length=2 y x))
         ((?x ?y ?z) (list 'length=3 z y x)))
       '(a (b c) d)))

;;------------------------------------------------------------------
(test-section-end)
