(require "test")

(test-section "Lexically-scoped, Non-Hygienic Macros")

(define-module test-lex-macros
  (import STKLOS-COMPILER)) ; for <syntax>?

(define-module test-lex-macros-2) ; used for testing modules

(select-module test-lex-macros)

;;;
;;; global %define-syntax
;;;

(%define-syntax test-syntax-1 (lambda form -1))

(test "lex-scope macros 1"
      #t
      (<syntax>? test-syntax-1))

(test "lex-scope macros 2"
      -1
      (test-syntax-1))

(test "lex-scope macros 3"
      -1
      (%macroexpand-1 '(test-syntax-1 a b c)))

(%define-syntax test-1 (lambda (x) `(- ,x)))
 (test "lex-scope macros 4"
       10
       (test-1 -10))


;; Define a macro in one module; it should not be visible in the other.
(select-module test-lex-macros-2)
(%define-syntax test-syntax-2 (lambda form -1))
(select-module test-lex-macros)

(test/error "lex-scope macros 5" (test-syntax-2))


;; Define a variable in one module, and a global macro in
;; a different module. The variable binding in the previous module
;; should not be affected
(define test-syntax-3 "a string")

(select-module test-lex-macros-2)
(%define-syntax test-syntax-3 (lambda form -2))
(select-module test-lex-macros)

(test "lex-scope macros 6"
      "a string"
      test-syntax-3)

;;;
;;; local %let-syntax
;;;

;;  %let-syntax should not mess with lexical levels
(test "lex-scope macros 7"
      -1
      (let ((a -1))
        (%let-syntax ((f (lambda (x) 1))
                      (g -2))       ; %let-syntax doesn't care if "-2"
                                    ; is used as transformer
           a)))

;; %let-syntax with empty environment should not mess with lexical levels
(test "lex-scope macros 8"
      -1
      (let ((a -1))
        (%let-syntax ()
           a)))

;; basic %let-syntax
(test "lex-scope macros 9"
      -2
      (let ((a -1))
        (%let-syntax ((f (lambda form -2)))
          (f))))

;; %let-syntax
(test "lex-scope macros 10"
      -2
      (%let-syntax ((g (lambda form -2)))
        (let ((a -1))
          (%let-syntax ((f (lambda form '(g))))
            (f)))))

(test "lex-scope macros 11"
      -2
      (let ((g (lambda () -1)))
        (%let-syntax ((g (lambda form -2)))
          (g))))

(test "lex-scope macros 12"
      -1
      (%let-syntax ((g (lambda form -2)))
        (let ((g (lambda () -1)))
          (g))))

(test "lex-scope macros 13"
      42
      (%let-syntax ((f (lambda form 42)))
        (let ((g (lambda () -1)))
          (let ((h -2))
            (let ((i -3))
              (f))))))

(%let-syntax ((f (lambda form 42)))
  (test "lex-scope macros 14"
        42
        (let ((g (lambda () -1)))
          (let ((h -2))
            (let ((i -3))
              (f))))))
        
(test/error "lex-scope macros 15"
            (%let-syntax ((g (lambda form -2)))
              g))

(test "lex-scope macros 16"
      -1
      (%let-syntax ((g (lambda form -2)))
        (%let-syntax ((g (lambda form -1)))
          (g))))

(test "lex-scope macros 17"
      -2
      (%let-syntax ((g (lambda form -2)))
        (let ((f (lambda () (g))))
          (%let-syntax ((g (lambda form -1)))
            (f)))))

(test "lex-scope macros 18"
      -1
      (%let-syntax ((g (lambda form -2)))
        (%let-syntax ((g (lambda form -1)))
          (let ((f (lambda () (g))))
            (f)))))

(test "lex-scope macros 19"
      -1
      (%let-syntax ((g (lambda form -1)))
        (begin
          (g))))


;; %let-syntax is NOT hygienic; we capture a variable in
;; this example.
(define (test-syntax-function x)
  (let ((one 1))
    (%let-syntax ((plus-one (lambda (k) `(+ one ,k))))
      (plus-one x))))

(test "lex-scope macros 20"
      -2
      (test-syntax-function -3))


;;;
(%define-syntax test-syntax-4 (lambda form -1))
(test "lex-scope macros 21"
      -1
      (let ((a -3))
        (%let-syntax ((g (lambda form -2)))
          (let ((f (lambda () (test-syntax-4))))
            (f)))))

(select-module STklos)

(test-section-end)
