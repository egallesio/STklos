;; SPDX-FileCopyrightText: 2024 Artyom Bologov
;; SPDX-License-Identifier: MIT

;;; Permission is hereby granted, free of charge, to any person
;;; obtaining a copy of this software and associated documentation
;;; files (the "Software"), to deal in the Software without
;;; restriction, including without limitation the rights to use,
;;; copy, modify, merge, publish, distribute, sublicense, and/or
;;; sell copies of the Software, and to permit persons to whom the
;;; Software is furnished to do so, subject to the following
;;; conditions:
;;;
;;; The above copyright notice and this permission notice shall be
;;; included in all copies or substantial portions of the Software.
;;;
;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
;;; OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;;; NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
;;; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
;;; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
;;; OTHER DEALINGS IN THE SOFTWARE.


;; We force here the verification of assumptions
(compiler:verify-assume #t)


 (define-syntax check-arg-true
   (syntax-rules ()
     ((_ pred val)
      (begin
        (check-arg pred val)
        #t))))
;;;
;;; check-arg
;;;

;; Sanity checks
(test "check-arg.0" #t (check-arg-true exact-integer? 3))
(test "check-arg.1" #t (check-arg-true integer? 3))
(test "check-arg.2" #t (check-arg-true boolean? #f))
(test "check-arg.3" #t (check-arg-true char? #\d))
(test "check-arg.4" #t (check-arg-true complex? 3+2i))
(test "check-arg.5" #t (check-arg-true inexact? 3.8))
(test "check-arg.6" #t (check-arg-true real? 3))
(test "check-arg.7" #t (check-arg-true real? 3/2))
(test "check-arg.8" #t (check-arg-true real? 3.8))
(test "check-arg.9" #t (check-arg-true list? '()))
(test "check-arg.10" #t (check-arg-true list? '(1 2 3)))
(test "check-arg.11" #t (check-arg-true null? '()))
(test "check-arg.12" #t (check-arg-true number? 3))
(test "check-arg.13" #t (check-arg-true number? 3+2i))
(test "check-arg.14" #t (check-arg-true number? 3.8))
(test "check-arg.15" #t (check-arg-true pair? '(1 2 3)))
(test "check-arg.16" #t (check-arg-true input-port? (current-input-port)))
(test "check-arg.17" #t (check-arg-true output-port? (current-output-port)))
(test "check-arg.18" #t (check-arg-true procedure? procedure?))
(test "check-arg.19" #t (check-arg-true rational? 3))
(test "check-arg.20" #t (check-arg-true rational? 3/2))
(test "check-arg.21" #t (check-arg-true string? ""))
(test "check-arg.22" #t (check-arg-true string? "hello"))
(test "check-arg.23" #t (check-arg-true symbol? 'hello))
;; Only enable on implementations supporting symbol->keyword
;;(test "check-arg.24" #t (check-arg-true keyword? (symbol->keyword 'hello)))
(test "check-arg.25" #t (check-arg-true vector? #(1 2 3)))

;; Predicate checks
(test "check-arg.26" #t (check-arg-true (lambda (x) (positive? (string-length x)))
                        "hello"))
(test "check-arg.27" #t (check-arg-true positive? 9))
(test "check-arg.28" #t (check-arg-true string-length "hello")) ;; If it works it works.
(test "check-arg.29" #t (check-arg-true (lambda (x)
                          (and (integer? x) (positive? x)))
                        8))
(test "check-arg.30" #t (check-arg-true ((lambda (x y)
                           (lambda (a) (and (x a) (y a))))
                         integer? positive?)
                        8))
;; Erroring checks
(test/error "check-arg.31" (check-arg-true string? 3))
(test/error "check-arg.32" (check-arg-true real? 3+2i))
(test/error "check-arg.33" (check-arg-true symbol? "hello"))
(test/error "check-arg.34" (check-arg-true procedure? 3))
;; It is an error when predicate doesn't pass, but it doesn't have to
;; throw errors. Disable depending on implementation.
(test/error "check-arg.35" (check-arg-true (lambda (a) (> a 3)) 0))


;; Syntax checks
; [eg] following test seems OK to me => commented
;;(test/error "check-arg.36" (begin (check-arg integer? 3 'testing-caller-arg) #t))
(test/compile-error "check-arg.37" (check-arg))


;;;
;;; values-checked
;;;

(test "values-checked.0"  3   (values-checked (integer?) 3))
(test "values-checked.1"  3   (values-checked ((lambda (x) (= 3 x))) 3))
(test "values-checked.2"  3.0 (values-checked (real?) 3.0))
;; Implementation-specific, might be 3.0
(test "values-checked.3"  3 (values-checked (real?) 3))
(test "values-checked.4"  '(3 "hello")
      (call-with-values
          (lambda() (values-checked (integer? string?) 3 "hello"))
          list))

(test "values-checked.5" 3.0 (values-checked (inexact?) 3.0))
(test/error "values-checked.6" (values-checked (integer?) "hello"))
(test/error "values-checked.7" (values-checked (integer? string?) 3 3))
;; Syntax checks
(test/compile-error "values-checked.8" (values-checked real? 3))
;; [eg] OK for me =>  commented
;;(test/compile-error "values-checked.9" (values-checked (real?) 3 8))
;; [eg] less values. Should it be an error?
;;(test/compile-error "values-checked.10" (values-checked (real? string?) 3))


;;;
;;; check-case
;;;

;; Sample implementation doesn't pass this
;; (test-assert (begin (check-case 3) #t))
(test "check-case.0" #t  (check-case "hello" (string? #t)))
(test "check-case.1" #t  (check-case 3 (integer? #t) (string? #f)))
(test "check-case.2" #t  (check-case 3.7 (inexact? #t)))
(test "check-case.3" #t  (check-case (current-output-port) (output-port? #t)))
(test "check-case.4" #t  (check-case #(1 2 3) (vector? #t)))
(test "check-case.5" #t  (check-case 3 (string? #f) (else #t)))
(test/error "check-case.6" (check-case 3 (string? #t)))

;;;
;;; lambda-checked
;;;
(test "lambda-check.0" 42 (and (lambda-checked () #t) 42))
(test "lambda-check.1" 42 (and (lambda-checked args #t) 42))
(test "lambda-check.2" 42 (and (lambda-checked (a) #t) 42))
(test "lambda-check.3" 42 (and (lambda-checked (a b) #t) 42))
(test "lambda-check.4" 42 (and (lambda-checked ((a integer?)) #t) 42))
(test "lambda-check.5" 42 (and (lambda-checked (a (b integer?)) #t) 42))
(test "lambda-check.6" 42 (and (lambda-checked ((a string?) (b integer?)) #t) 42))
(test "lambda-check.7" #t ((lambda-checked () #t)))
(test "lambda-check.8" #t ((lambda-checked args #t) 1 2 3))
(test "lambda-check.9" #t ((lambda-checked (a) #t) 3))
(test "lambda-check.10" #t ((lambda-checked (a) #t) "hello"))
(test "lambda-check.11" #t ((lambda-checked ((a integer?)) #t) 3))
(test "lambda-check.12" #t ((lambda-checked (a (b integer?)) #t) 3 3))
(test "lambda-check.13" #t ((lambda-checked (a (b integer?)) #t) "hello" 3))

(test/error "lambda-check.14" ((lambda-checked ((a integer?)) #t) "hello"))
(test/error "lambda-check.15" ((lambda-checked (a (b integer?)) #t) "hello" "hi"))
;; Rest args. Sample implementation doesn't reliably pass this.
;; (test-assert (lambda-checked (a . c) #t))
;; (test-assert (lambda-checked ((a integer?) . c) #t))
;; (test-assert (lambda-checked (a b . c) #t))
;; (test-assert (lambda-checked (a (b integer?) . c) #t))
;; Syntax checks
 (test/compile-error "lambda-check.16" (lambda-checked))
 (test/compile-error "lambda-checked.17" (lambda-checked ()))

;;;
;;; case-lambda-checked
;;;
(test "case-lambda-checked.0" #t
      (procedure? (case-lambda-checked
                   (() #t))))
(test "case-lambda-checked.1" #t
      (procedure? (case-lambda-checked
                   (args #t))))
(test "case-lambda-checked.2" #t
      (procedure? (case-lambda-checked
                   ((a) #t))))
(test "case-lambda-checked.3" #t
      (procedure? (case-lambda-checked
                   ((a) #t))))
(test "case-lambda-checked.4" #t
      (procedure? (case-lambda-checked
                   (() #t) ((a) #t))))
(test "case-lambda-checked.5" #t
      (procedure? (case-lambda-checked
                   (() #t) ((a) #t) (args #t))))
(test "case-lambda-checked.6" #t
      (procedure? (case-lambda-checked
                  (((a integer?)) #t))))
(test "case-lambda-checked.7" #t
      (procedure? (case-lambda-checked
                   (((a integer?) b) #t))))
(test "case-lambda-checked.8" #t
      (procedure? (case-lambda-checked
                   ((a (b integer?)) #t))))
(test "case-lambda-checked.9" #t
      (procedure? (case-lambda-checked
                   (() #t)
                   (((a integer?)) #t)
                   ((a (b string?)) #t)
                   (args #t))))


;;; NOTE: I've replaced ((a string?) b . rest) by a ((a string?) b :rest rest) to
;;;       avoid a dotted list which is an issue witch define-syntax expansion. 
(define checked-case-lambda
  (case-lambda-checked
   (() #t)
   (((a integer?)) #t)
   ((a (b string?)) #t)
   (((a string?) b :rest rest) #t)))

(test "case-lambda-checked.10" #t (checked-case-lambda))
(test "case-lambda-checked.11" #t (checked-case-lambda 3))
(test/error "case-lambda-checked.12" (checked-case-lambda "hello"))
(test "case-lambda-checked.13" #t (checked-case-lambda 3 "hello"))
(test "case-lambda-checked.14" #t (checked-case-lambda "hi" "hello"))
(test/error "case-lambda-checked.15" (checked-case-lambda 3 3 3))

;;;
;;; define-checked 
;;;
(define-checked (c) #t)
(test "define-checked.0" #t (c))

(define-checked (c (a integer?)) #t)
(test "define-checked.1" #t (c 3))
(test/error "define-checked.2" (c "hello"))

(define-checked (c b) #t)
(test "define-checked.3" #t (c "anything"))
(test/error "define-checked.4"  (c 1 2 3))

(define-checked (c (b string?)) #t)
(test "define-checked.5" #t (c "hello"))
(test/error "define-checked.6"  (c 3))

;; Rest args. Sample implementation doesn't reliably pass this.
;; (test-assert (define-checked (c b . d) #t))
;; (test-error (c))
;; (test-assert (c 1))
;; (test-assert (c 1 2))
;; (test-assert (c 1 2 3))

(define-checked c string? "hello")
(test "define-checked.7" "hello" c)
(set! c "whatever")
(test "define-checked.8" "whatever" c)

;;//;; Optional, only if implementation checks all modifications.
;;//;; (test-error (set! c 3))
;;//;; Syntax checks
;;//;; (define-error (define-checked))
;;//;; (define-error (define-checked a))
;;//;; (define-error (define-checked a string?))
;;//;; (define-error (define-checked a string? "hello" 'aux))

;;;
;;; define-record-type-checked
;;;
(define-record-type-checked <test>
  (make-test a b)
  test?
  (a integer? test-a)
  (b string? test-b test-b-set!))

(test "define-record-type-checked.0" #t (struct? (make-test 1 "hello")))
(test/error "define-record-type-checked.1" (make-test 1))
(test/error "define-record-type-checked.2" (make-test 1 2))
(test/error "define-record-type-checked.3" (make-test 1.2 "hello"))

(define test-test (make-test 1 "hello"))

(test "define-record-type-checked.4" #t (begin
                                          (test-b-set! test-test "foo")
                                          #t))
(test/error "define-record-type-checked.5" (test-b-set! test-test 1))

