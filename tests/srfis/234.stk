
(test "srfi-234.1"
      '(a b d c)
      (topological-sort '((a b c)
                          (b d)
                          (c)
                      (d c))))

;; details: multiple values
(test "srfi-234.2"
      '((a b d c) #f #f)
      (let-values
          (((v0 v1 v2)
            (topological-sort/details '((a b c)
                                        (b d)
                                        (c)
                                        (d c)))))
        (list v0 v1 v2)))

;; cycle
(test "srfi-234.3"
      #f
      (topological-sort '((a b)
                          (b a))))

;; cycle error details
(test "srfi-234.4"
      '(#f "graph has circular dependency" (a b))
      (let-values
          (((v0 v1 v2)
            (topological-sort/details '((a b)
                                        (b a)))))
    (list v0 v1 v2)))

(test "srfi-234.5"
      '("a" "b" "d" "c")
      (topological-sort '(("a" "b" "c")
                          ("b" "d")
                          ("c")
                          ("d" "c"))
                        string=?))

(test "srfi-234.6"
      '((a b c) (b e))
      (edgelist->graph '((a b) (a c) (b e))))

(test "srfi-234.7"
      '((a b) (a c) (b e))
      (graph->edgelist '((a b c) (b e))))

(test "srfi-234.8"
      '((a b c) (b e))
      (edgelist/inverted->graph '((b a) (c a) (e b))))

(test "srfi-234.9"
      '((b a) (c a) (e b))
      (graph->edgelist/inverted '((a b c) (b e))))

(test "srfi-234.10"
      '((0 1) (1 2) (2 0) (3 1 2 4) (4 3 5) (5 2 6) (6 5) (7 4 6 7))
      (edgelist->graph '((0 1)
                         (1 2)
                         (2 0)
                         (3 1) (3 2) (3 4)
                         (4 3) (4 5)
                         (5 2) (5 6)
                         (6 5)
                         (7 4) (7 6) (7 7))))

(test "srfi-234.11"
      '((1 0 3) (2 1 3 5) (0 2) (4 3 7) (3 4) (5 4 6) (6 5 7) (7 7))
      (edgelist/inverted->graph '((0 1)
                                  (1 2)
                                  (2 0)
                                  (3 1) (3 2) (3 4)
                                  (4 3) (4 5)
                                  (5 2) (5 6)
                                  (6 5)
                                  (7 4) (7 6) (7 7))))

(test "srfi-234.12"
      '((2 0 1) (6 5) (3 4) (7))
      (connected-components
       (edgelist->graph '((0 1)
                          (1 2)
                          (2 0)
                          (3 1) (3 2) (3 4)
                          (4 3) (4 5)
                          (5 2) (5 6)
                          (6 5)
                          (7 4) (7 6) (7 7)))))

(define (permutations edgelist)
  (if (null? edgelist) '(())
      (apply append
             (map (lambda (edge)
                    (map (lambda (permutation)
                           (cons edge permutation))
                         (permutations (delete edge edgelist))))
                  edgelist))))

(test "srfi-234.13"
      #t
      (every (lambda (edgelist)
               (let* ((graph (edgelist->graph edgelist))
                      (order (topological-sort graph equal?)))
                 (cond
                  ((equal? order '(top left right bottom)) #t)
                  ((equal? order '(top right left bottom)) #t)
                  (else order))))
             (permutations '((top left) (top right) (left bottom) (right bottom)))))

(test "srfi-234.14"
      '(libnewsboat regex-rs strprintf)
      (topological-sort (edgelist->graph '((libnewsboat strprintf)
                                           (libnewsboat regex-rs)
                                           (regex-rs strprintf)))))
