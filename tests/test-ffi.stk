;;;;
;;;; test-ffi.stk   -- Tests of FFI
;;;;
;;;; Copyright © 2007-2025 Erick Gallesio <eg@stklos.net>
;;;;
;;;;
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;;;; USA.
;;;;
;;;;           Author: Erick Gallesio [eg@essi.fr]
;;;;    Creation date: 26-Sep-2009 10:17 (eg)
;;;;
(require "test")

(test-section "FFI")

;;; RINDEX
(define-external %rindex (:string :int)
  :entry-name "strrchr"
  :return-type :string)

(define (rindex str char)
  (%rindex str (char->integer char)))

;;; STRLEN
(define-external strlen(:string)
  :return-type :int)


(test "rindex.1"
      "/d"
      (rindex "/a/b/c/d" #\/))


(test "rindex.2"
      (void)
      (rindex "/a/b/c/d" #\A))

(test "strlen.1"
      0
      (strlen ""))

(test "strlen.2"
      5
      (strlen "abcde"))

;;; COS

(define-external cos(:double)
  :return-type :double)

;; check that we actually shadowed the original 'cos' in Scheme:
(test "cos.1"
      #f
      (eq? cos (in-module SCHEME cos)))

(test "cos.2"
      #t
      (= (cos 1.5)
         ((in-module SCHEME cos) 1.5)))

;;; ABS, LABS

(define-external labs(:int)
  :return-type :int)

(define-external abs(:long)
  :return-type :long)

(test "abs.1"
      #f
      (eq? abs (in-module SCHEME abs)))

(test "abs.2"
      200
      (abs -200))

(test "abs.3"
      200
      (abs 200))

(test "abs.4"
            #t
            (= (abs -65)
               ((in-module SCHEME abs) -65)))

;; if we don't restore abs, it will cause errors later. Our Scheme abs works for
;; reals, but the C abs is for ints only...
(define abs (in-module SCHEME abs))

(test "labs.1"
      200
      (labs -200))

(test "labs.2"
      200
      (labs 200))

(test "labs.3"
            #t
            (= (labs -65)
               ((in-module SCHEME abs) -65)))

;;; NULL pointer and STRTOL

;; Suppressed by eg
;; (test "null cpointer" #t (cpointer-null? (%make-cpointer-null)))

(define-external strtol(:string :pointer :int)
  :return-type :long)

;; base 8
(test "strtol.1"
      513
      (strtol "1001" #void 8))

;; base 10
(test "strtol.2"
      1001
      (strtol "1001" #void 10))

;; base 2
(test "strtol.3"
      9
      (strtol "1001" #void 2))

;; base 16
(test "strtol.4"
      6699
      (strtol "1a2b" #void 16))


;; allocate-bytes

(define p (allocate-bytes 64))
(test "allocate-bytes.1"
      #t
      (cpointer? p))
(for-each
  (lambda (type)
    (cpointer-set! p type 42)
    (test (string-append "cpointer-set/cpointer-ref ̣" (keyword->string type))
          42
          (cpointer-ref p type)))
  (list :short
        :ushort
        :int
        :uint
        :long
        :ulong
        :longlong
        :ulonglong
        :int8
        :int16
        :int32
        :int64
        :uint8
        :uint16
        :uint32
        :uint64))

(cpointer-set! p :char #\a)
(test "cpointer-set/cpointer-ref ̣char"
      (char->integer #\a)
      (cpointer-ref p :char))
(cpointer-set! p :schar #\b)
(test "cpointer-set/cpointer-ref ̣schar.1" #\b
      (integer->char (cpointer-ref p :schar)))
(cpointer-set! p :schar (char->integer #\c))
(test "cpointer-set/cpointer-ref ̣schar.2" #\c
      (integer->char (cpointer-ref p :schar)))
(cpointer-set! p :uchar #\a)
(test "cpointer-set/cpointer-ref ụchar"
      (char->integer #\a)
      (cpointer-ref p :uchar))

(cpointer-set! p :boolean #t)
(test "cpointer-set/cpointer-ref ̣boolean1" #t (cpointer-ref p :boolean))
(cpointer-set! p :boolean #f)
(test "cpointer-set/cpointer-ref ̣boolean2" #f (cpointer-ref p :boolean))

(cpointer-set! p :float 3.5)             ;; Scheme double 3.5 can be represented
(test "cpointer-set/cpointer-ref ̣1" 3.5 ;; as a float => using "=" is fine here
      (cpointer-ref p :float))
(cpointer-set! p :double 3.5)
(test "cpointer-set/cpointer-ref ̣2" 3.5 (cpointer-ref p :double))



(cpointer-set! p :float 42.42)             ;; double 42.42 can't be represented
(test "cpointer-set/cpointer-ref ̣1" 42.42 ;; as a float => verify they are near "="
      (cpointer-ref p :float)
      (lambda (x y) (< (abs (- x y)) 0.1)))
(cpointer-set! p :double 42.42)
(test "cpointer-set/cpointer-ref ̣2" 42.42 (cpointer-ref p :double))


;;; C-size-of
(test "sizeof char" 1 (c-size-of :char))
(test "sizeof schar" 1 (c-size-of :schar))
(test "sizeof uchar" 1 (c-size-of :uchar))
(test "sizeof int16 = 2* sizeof int8" #t (= (* 2 (c-size-of :int8))
                                            (c-size-of :int16)))
(test "sizeof pointer = sizeof string" #t (= (c-size-of :pointer)
                                             (c-size-of :string)))

;; Testing offset in ref/set
(define buff (allocate-bytes 5))
(cpointer-set! buff :uchar #\a 0)
(cpointer-set! buff :uchar #\B 1)
(cpointer-set! buff :uchar #\c 2)
(cpointer-set! buff :uchar #\D 3)
(cpointer-set! buff :uchar #\null 4)

(test "ref with offsets"
      (map char->integer '(#\a #\B #\c #\D #\null))
      (list (cpointer-ref buff :uchar 0)
            (cpointer-ref buff :uchar 1)
            (cpointer-ref buff :uchar 2)
            (cpointer-ref buff :uchar 3)
            (cpointer-ref buff :uchar 4)))
(test "read back the (forged) C string"
      "aBcD"
      (cpointer->string buff))


(let ((array (allocate-bytes (* 10 (c-size-of :long)))))
  (dotimes (i 10)
           (cpointer-set! array :long (square i) i))
  (test "offset with long"
        '(0 1 4 9 16 25 36 49 64 81)
        (map (lambda (i)
               (cpointer-ref array :long i))
             '(0 1 2 3 4 5 6 7 8 9))))




(test-section-end)
